/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const SOKOL_APP_INCLUDED: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SOKOL_LOG_INCLUDED: u32 = 1;
pub const SOKOL_TIME_INCLUDED: u32 = 1;
pub const SOKOL_GFX_INCLUDED: u32 = 1;
pub const SOKOL_GP_INCLUDED: u32 = 1;
pub const SGP_BATCH_OPTIMIZER_DEPTH: u32 = 8;
pub const SGP_UNIFORM_CONTENT_SLOTS: u32 = 4;
pub const SGP_TEXTURE_SLOTS: u32 = 4;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const USE_CLANG_STDARG: u32 = 0;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const STBI_VERSION: u32 = 1;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const SAPP_MAX_TOUCHPOINTS: _bindgen_ty_1 = 8;
pub const SAPP_MAX_MOUSEBUTTONS: _bindgen_ty_1 = 3;
pub const SAPP_MAX_KEYCODES: _bindgen_ty_1 = 512;
pub const SAPP_MAX_ICONIMAGES: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const sapp_event_type_SAPP_EVENTTYPE_INVALID: sapp_event_type = 0;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_DOWN: sapp_event_type = 1;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_UP: sapp_event_type = 2;
pub const sapp_event_type_SAPP_EVENTTYPE_CHAR: sapp_event_type = 3;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_DOWN: sapp_event_type = 4;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_UP: sapp_event_type = 5;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_SCROLL: sapp_event_type = 6;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_MOVE: sapp_event_type = 7;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_ENTER: sapp_event_type = 8;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_LEAVE: sapp_event_type = 9;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_BEGAN: sapp_event_type = 10;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_MOVED: sapp_event_type = 11;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_ENDED: sapp_event_type = 12;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_CANCELLED: sapp_event_type = 13;
pub const sapp_event_type_SAPP_EVENTTYPE_RESIZED: sapp_event_type = 14;
pub const sapp_event_type_SAPP_EVENTTYPE_ICONIFIED: sapp_event_type = 15;
pub const sapp_event_type_SAPP_EVENTTYPE_RESTORED: sapp_event_type = 16;
pub const sapp_event_type_SAPP_EVENTTYPE_FOCUSED: sapp_event_type = 17;
pub const sapp_event_type_SAPP_EVENTTYPE_UNFOCUSED: sapp_event_type = 18;
pub const sapp_event_type_SAPP_EVENTTYPE_SUSPENDED: sapp_event_type = 19;
pub const sapp_event_type_SAPP_EVENTTYPE_RESUMED: sapp_event_type = 20;
pub const sapp_event_type_SAPP_EVENTTYPE_QUIT_REQUESTED: sapp_event_type = 21;
pub const sapp_event_type_SAPP_EVENTTYPE_CLIPBOARD_PASTED: sapp_event_type = 22;
pub const sapp_event_type_SAPP_EVENTTYPE_FILES_DROPPED: sapp_event_type = 23;
pub const sapp_event_type__SAPP_EVENTTYPE_NUM: sapp_event_type = 24;
pub const sapp_event_type__SAPP_EVENTTYPE_FORCE_U32: sapp_event_type = 2147483647;
pub type sapp_event_type = ::std::os::raw::c_uint;
pub const sapp_keycode_SAPP_KEYCODE_INVALID: sapp_keycode = 0;
pub const sapp_keycode_SAPP_KEYCODE_SPACE: sapp_keycode = 32;
pub const sapp_keycode_SAPP_KEYCODE_APOSTROPHE: sapp_keycode = 39;
pub const sapp_keycode_SAPP_KEYCODE_COMMA: sapp_keycode = 44;
pub const sapp_keycode_SAPP_KEYCODE_MINUS: sapp_keycode = 45;
pub const sapp_keycode_SAPP_KEYCODE_PERIOD: sapp_keycode = 46;
pub const sapp_keycode_SAPP_KEYCODE_SLASH: sapp_keycode = 47;
pub const sapp_keycode_SAPP_KEYCODE_0: sapp_keycode = 48;
pub const sapp_keycode_SAPP_KEYCODE_1: sapp_keycode = 49;
pub const sapp_keycode_SAPP_KEYCODE_2: sapp_keycode = 50;
pub const sapp_keycode_SAPP_KEYCODE_3: sapp_keycode = 51;
pub const sapp_keycode_SAPP_KEYCODE_4: sapp_keycode = 52;
pub const sapp_keycode_SAPP_KEYCODE_5: sapp_keycode = 53;
pub const sapp_keycode_SAPP_KEYCODE_6: sapp_keycode = 54;
pub const sapp_keycode_SAPP_KEYCODE_7: sapp_keycode = 55;
pub const sapp_keycode_SAPP_KEYCODE_8: sapp_keycode = 56;
pub const sapp_keycode_SAPP_KEYCODE_9: sapp_keycode = 57;
pub const sapp_keycode_SAPP_KEYCODE_SEMICOLON: sapp_keycode = 59;
pub const sapp_keycode_SAPP_KEYCODE_EQUAL: sapp_keycode = 61;
pub const sapp_keycode_SAPP_KEYCODE_A: sapp_keycode = 65;
pub const sapp_keycode_SAPP_KEYCODE_B: sapp_keycode = 66;
pub const sapp_keycode_SAPP_KEYCODE_C: sapp_keycode = 67;
pub const sapp_keycode_SAPP_KEYCODE_D: sapp_keycode = 68;
pub const sapp_keycode_SAPP_KEYCODE_E: sapp_keycode = 69;
pub const sapp_keycode_SAPP_KEYCODE_F: sapp_keycode = 70;
pub const sapp_keycode_SAPP_KEYCODE_G: sapp_keycode = 71;
pub const sapp_keycode_SAPP_KEYCODE_H: sapp_keycode = 72;
pub const sapp_keycode_SAPP_KEYCODE_I: sapp_keycode = 73;
pub const sapp_keycode_SAPP_KEYCODE_J: sapp_keycode = 74;
pub const sapp_keycode_SAPP_KEYCODE_K: sapp_keycode = 75;
pub const sapp_keycode_SAPP_KEYCODE_L: sapp_keycode = 76;
pub const sapp_keycode_SAPP_KEYCODE_M: sapp_keycode = 77;
pub const sapp_keycode_SAPP_KEYCODE_N: sapp_keycode = 78;
pub const sapp_keycode_SAPP_KEYCODE_O: sapp_keycode = 79;
pub const sapp_keycode_SAPP_KEYCODE_P: sapp_keycode = 80;
pub const sapp_keycode_SAPP_KEYCODE_Q: sapp_keycode = 81;
pub const sapp_keycode_SAPP_KEYCODE_R: sapp_keycode = 82;
pub const sapp_keycode_SAPP_KEYCODE_S: sapp_keycode = 83;
pub const sapp_keycode_SAPP_KEYCODE_T: sapp_keycode = 84;
pub const sapp_keycode_SAPP_KEYCODE_U: sapp_keycode = 85;
pub const sapp_keycode_SAPP_KEYCODE_V: sapp_keycode = 86;
pub const sapp_keycode_SAPP_KEYCODE_W: sapp_keycode = 87;
pub const sapp_keycode_SAPP_KEYCODE_X: sapp_keycode = 88;
pub const sapp_keycode_SAPP_KEYCODE_Y: sapp_keycode = 89;
pub const sapp_keycode_SAPP_KEYCODE_Z: sapp_keycode = 90;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_BRACKET: sapp_keycode = 91;
pub const sapp_keycode_SAPP_KEYCODE_BACKSLASH: sapp_keycode = 92;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_BRACKET: sapp_keycode = 93;
pub const sapp_keycode_SAPP_KEYCODE_GRAVE_ACCENT: sapp_keycode = 96;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_1: sapp_keycode = 161;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_2: sapp_keycode = 162;
pub const sapp_keycode_SAPP_KEYCODE_ESCAPE: sapp_keycode = 256;
pub const sapp_keycode_SAPP_KEYCODE_ENTER: sapp_keycode = 257;
pub const sapp_keycode_SAPP_KEYCODE_TAB: sapp_keycode = 258;
pub const sapp_keycode_SAPP_KEYCODE_BACKSPACE: sapp_keycode = 259;
pub const sapp_keycode_SAPP_KEYCODE_INSERT: sapp_keycode = 260;
pub const sapp_keycode_SAPP_KEYCODE_DELETE: sapp_keycode = 261;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT: sapp_keycode = 262;
pub const sapp_keycode_SAPP_KEYCODE_LEFT: sapp_keycode = 263;
pub const sapp_keycode_SAPP_KEYCODE_DOWN: sapp_keycode = 264;
pub const sapp_keycode_SAPP_KEYCODE_UP: sapp_keycode = 265;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_UP: sapp_keycode = 266;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_DOWN: sapp_keycode = 267;
pub const sapp_keycode_SAPP_KEYCODE_HOME: sapp_keycode = 268;
pub const sapp_keycode_SAPP_KEYCODE_END: sapp_keycode = 269;
pub const sapp_keycode_SAPP_KEYCODE_CAPS_LOCK: sapp_keycode = 280;
pub const sapp_keycode_SAPP_KEYCODE_SCROLL_LOCK: sapp_keycode = 281;
pub const sapp_keycode_SAPP_KEYCODE_NUM_LOCK: sapp_keycode = 282;
pub const sapp_keycode_SAPP_KEYCODE_PRINT_SCREEN: sapp_keycode = 283;
pub const sapp_keycode_SAPP_KEYCODE_PAUSE: sapp_keycode = 284;
pub const sapp_keycode_SAPP_KEYCODE_F1: sapp_keycode = 290;
pub const sapp_keycode_SAPP_KEYCODE_F2: sapp_keycode = 291;
pub const sapp_keycode_SAPP_KEYCODE_F3: sapp_keycode = 292;
pub const sapp_keycode_SAPP_KEYCODE_F4: sapp_keycode = 293;
pub const sapp_keycode_SAPP_KEYCODE_F5: sapp_keycode = 294;
pub const sapp_keycode_SAPP_KEYCODE_F6: sapp_keycode = 295;
pub const sapp_keycode_SAPP_KEYCODE_F7: sapp_keycode = 296;
pub const sapp_keycode_SAPP_KEYCODE_F8: sapp_keycode = 297;
pub const sapp_keycode_SAPP_KEYCODE_F9: sapp_keycode = 298;
pub const sapp_keycode_SAPP_KEYCODE_F10: sapp_keycode = 299;
pub const sapp_keycode_SAPP_KEYCODE_F11: sapp_keycode = 300;
pub const sapp_keycode_SAPP_KEYCODE_F12: sapp_keycode = 301;
pub const sapp_keycode_SAPP_KEYCODE_F13: sapp_keycode = 302;
pub const sapp_keycode_SAPP_KEYCODE_F14: sapp_keycode = 303;
pub const sapp_keycode_SAPP_KEYCODE_F15: sapp_keycode = 304;
pub const sapp_keycode_SAPP_KEYCODE_F16: sapp_keycode = 305;
pub const sapp_keycode_SAPP_KEYCODE_F17: sapp_keycode = 306;
pub const sapp_keycode_SAPP_KEYCODE_F18: sapp_keycode = 307;
pub const sapp_keycode_SAPP_KEYCODE_F19: sapp_keycode = 308;
pub const sapp_keycode_SAPP_KEYCODE_F20: sapp_keycode = 309;
pub const sapp_keycode_SAPP_KEYCODE_F21: sapp_keycode = 310;
pub const sapp_keycode_SAPP_KEYCODE_F22: sapp_keycode = 311;
pub const sapp_keycode_SAPP_KEYCODE_F23: sapp_keycode = 312;
pub const sapp_keycode_SAPP_KEYCODE_F24: sapp_keycode = 313;
pub const sapp_keycode_SAPP_KEYCODE_F25: sapp_keycode = 314;
pub const sapp_keycode_SAPP_KEYCODE_KP_0: sapp_keycode = 320;
pub const sapp_keycode_SAPP_KEYCODE_KP_1: sapp_keycode = 321;
pub const sapp_keycode_SAPP_KEYCODE_KP_2: sapp_keycode = 322;
pub const sapp_keycode_SAPP_KEYCODE_KP_3: sapp_keycode = 323;
pub const sapp_keycode_SAPP_KEYCODE_KP_4: sapp_keycode = 324;
pub const sapp_keycode_SAPP_KEYCODE_KP_5: sapp_keycode = 325;
pub const sapp_keycode_SAPP_KEYCODE_KP_6: sapp_keycode = 326;
pub const sapp_keycode_SAPP_KEYCODE_KP_7: sapp_keycode = 327;
pub const sapp_keycode_SAPP_KEYCODE_KP_8: sapp_keycode = 328;
pub const sapp_keycode_SAPP_KEYCODE_KP_9: sapp_keycode = 329;
pub const sapp_keycode_SAPP_KEYCODE_KP_DECIMAL: sapp_keycode = 330;
pub const sapp_keycode_SAPP_KEYCODE_KP_DIVIDE: sapp_keycode = 331;
pub const sapp_keycode_SAPP_KEYCODE_KP_MULTIPLY: sapp_keycode = 332;
pub const sapp_keycode_SAPP_KEYCODE_KP_SUBTRACT: sapp_keycode = 333;
pub const sapp_keycode_SAPP_KEYCODE_KP_ADD: sapp_keycode = 334;
pub const sapp_keycode_SAPP_KEYCODE_KP_ENTER: sapp_keycode = 335;
pub const sapp_keycode_SAPP_KEYCODE_KP_EQUAL: sapp_keycode = 336;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SHIFT: sapp_keycode = 340;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_CONTROL: sapp_keycode = 341;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_ALT: sapp_keycode = 342;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SUPER: sapp_keycode = 343;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SHIFT: sapp_keycode = 344;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_CONTROL: sapp_keycode = 345;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_ALT: sapp_keycode = 346;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SUPER: sapp_keycode = 347;
pub const sapp_keycode_SAPP_KEYCODE_MENU: sapp_keycode = 348;
pub type sapp_keycode = ::std::os::raw::c_uint;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_UNKNOWN: sapp_android_tooltype = 0;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_FINGER: sapp_android_tooltype = 1;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_STYLUS: sapp_android_tooltype = 2;
pub const sapp_android_tooltype_SAPP_ANDROIDTOOLTYPE_MOUSE: sapp_android_tooltype = 3;
pub type sapp_android_tooltype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_touchpoint {
    pub identifier: usize,
    pub pos_x: f32,
    pub pos_y: f32,
    pub android_tooltype: sapp_android_tooltype,
    pub changed: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_touchpoint"][::std::mem::size_of::<sapp_touchpoint>() - 24usize];
    ["Alignment of sapp_touchpoint"][::std::mem::align_of::<sapp_touchpoint>() - 8usize];
    ["Offset of field: sapp_touchpoint::identifier"]
        [::std::mem::offset_of!(sapp_touchpoint, identifier) - 0usize];
    ["Offset of field: sapp_touchpoint::pos_x"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_x) - 8usize];
    ["Offset of field: sapp_touchpoint::pos_y"]
        [::std::mem::offset_of!(sapp_touchpoint, pos_y) - 12usize];
    ["Offset of field: sapp_touchpoint::android_tooltype"]
        [::std::mem::offset_of!(sapp_touchpoint, android_tooltype) - 16usize];
    ["Offset of field: sapp_touchpoint::changed"]
        [::std::mem::offset_of!(sapp_touchpoint, changed) - 20usize];
};
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_LEFT: sapp_mousebutton = 0;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_RIGHT: sapp_mousebutton = 1;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_MIDDLE: sapp_mousebutton = 2;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_INVALID: sapp_mousebutton = 256;
pub type sapp_mousebutton = ::std::os::raw::c_uint;
pub const SAPP_MODIFIER_SHIFT: _bindgen_ty_2 = 1;
pub const SAPP_MODIFIER_CTRL: _bindgen_ty_2 = 2;
pub const SAPP_MODIFIER_ALT: _bindgen_ty_2 = 4;
pub const SAPP_MODIFIER_SUPER: _bindgen_ty_2 = 8;
pub const SAPP_MODIFIER_LMB: _bindgen_ty_2 = 256;
pub const SAPP_MODIFIER_RMB: _bindgen_ty_2 = 512;
pub const SAPP_MODIFIER_MMB: _bindgen_ty_2 = 1024;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_event {
    pub frame_count: u64,
    pub type_: sapp_event_type,
    pub key_code: sapp_keycode,
    pub char_code: u32,
    pub key_repeat: bool,
    pub modifiers: u32,
    pub mouse_button: sapp_mousebutton,
    pub mouse_x: f32,
    pub mouse_y: f32,
    pub mouse_dx: f32,
    pub mouse_dy: f32,
    pub scroll_x: f32,
    pub scroll_y: f32,
    pub num_touches: ::std::os::raw::c_int,
    pub touches: [sapp_touchpoint; 8usize],
    pub window_width: ::std::os::raw::c_int,
    pub window_height: ::std::os::raw::c_int,
    pub framebuffer_width: ::std::os::raw::c_int,
    pub framebuffer_height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_event"][::std::mem::size_of::<sapp_event>() - 272usize];
    ["Alignment of sapp_event"][::std::mem::align_of::<sapp_event>() - 8usize];
    ["Offset of field: sapp_event::frame_count"]
        [::std::mem::offset_of!(sapp_event, frame_count) - 0usize];
    ["Offset of field: sapp_event::type_"][::std::mem::offset_of!(sapp_event, type_) - 8usize];
    ["Offset of field: sapp_event::key_code"]
        [::std::mem::offset_of!(sapp_event, key_code) - 12usize];
    ["Offset of field: sapp_event::char_code"]
        [::std::mem::offset_of!(sapp_event, char_code) - 16usize];
    ["Offset of field: sapp_event::key_repeat"]
        [::std::mem::offset_of!(sapp_event, key_repeat) - 20usize];
    ["Offset of field: sapp_event::modifiers"]
        [::std::mem::offset_of!(sapp_event, modifiers) - 24usize];
    ["Offset of field: sapp_event::mouse_button"]
        [::std::mem::offset_of!(sapp_event, mouse_button) - 28usize];
    ["Offset of field: sapp_event::mouse_x"][::std::mem::offset_of!(sapp_event, mouse_x) - 32usize];
    ["Offset of field: sapp_event::mouse_y"][::std::mem::offset_of!(sapp_event, mouse_y) - 36usize];
    ["Offset of field: sapp_event::mouse_dx"]
        [::std::mem::offset_of!(sapp_event, mouse_dx) - 40usize];
    ["Offset of field: sapp_event::mouse_dy"]
        [::std::mem::offset_of!(sapp_event, mouse_dy) - 44usize];
    ["Offset of field: sapp_event::scroll_x"]
        [::std::mem::offset_of!(sapp_event, scroll_x) - 48usize];
    ["Offset of field: sapp_event::scroll_y"]
        [::std::mem::offset_of!(sapp_event, scroll_y) - 52usize];
    ["Offset of field: sapp_event::num_touches"]
        [::std::mem::offset_of!(sapp_event, num_touches) - 56usize];
    ["Offset of field: sapp_event::touches"][::std::mem::offset_of!(sapp_event, touches) - 64usize];
    ["Offset of field: sapp_event::window_width"]
        [::std::mem::offset_of!(sapp_event, window_width) - 256usize];
    ["Offset of field: sapp_event::window_height"]
        [::std::mem::offset_of!(sapp_event, window_height) - 260usize];
    ["Offset of field: sapp_event::framebuffer_width"]
        [::std::mem::offset_of!(sapp_event, framebuffer_width) - 264usize];
    ["Offset of field: sapp_event::framebuffer_height"]
        [::std::mem::offset_of!(sapp_event, framebuffer_height) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_range"][::std::mem::size_of::<sapp_range>() - 16usize];
    ["Alignment of sapp_range"][::std::mem::align_of::<sapp_range>() - 8usize];
    ["Offset of field: sapp_range::ptr"][::std::mem::offset_of!(sapp_range, ptr) - 0usize];
    ["Offset of field: sapp_range::size"][::std::mem::offset_of!(sapp_range, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_image_desc {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: sapp_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_image_desc"][::std::mem::size_of::<sapp_image_desc>() - 24usize];
    ["Alignment of sapp_image_desc"][::std::mem::align_of::<sapp_image_desc>() - 8usize];
    ["Offset of field: sapp_image_desc::width"]
        [::std::mem::offset_of!(sapp_image_desc, width) - 0usize];
    ["Offset of field: sapp_image_desc::height"]
        [::std::mem::offset_of!(sapp_image_desc, height) - 4usize];
    ["Offset of field: sapp_image_desc::pixels"]
        [::std::mem::offset_of!(sapp_image_desc, pixels) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_icon_desc {
    pub sokol_default: bool,
    pub images: [sapp_image_desc; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_icon_desc"][::std::mem::size_of::<sapp_icon_desc>() - 200usize];
    ["Alignment of sapp_icon_desc"][::std::mem::align_of::<sapp_icon_desc>() - 8usize];
    ["Offset of field: sapp_icon_desc::sokol_default"]
        [::std::mem::offset_of!(sapp_icon_desc, sokol_default) - 0usize];
    ["Offset of field: sapp_icon_desc::images"]
        [::std::mem::offset_of!(sapp_icon_desc, images) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_allocator"][::std::mem::size_of::<sapp_allocator>() - 24usize];
    ["Alignment of sapp_allocator"][::std::mem::align_of::<sapp_allocator>() - 8usize];
    ["Offset of field: sapp_allocator::alloc_fn"]
        [::std::mem::offset_of!(sapp_allocator, alloc_fn) - 0usize];
    ["Offset of field: sapp_allocator::free_fn"]
        [::std::mem::offset_of!(sapp_allocator, free_fn) - 8usize];
    ["Offset of field: sapp_allocator::user_data"]
        [::std::mem::offset_of!(sapp_allocator, user_data) - 16usize];
};
pub const sapp_log_item_SAPP_LOGITEM_OK: sapp_log_item = 0;
pub const sapp_log_item_SAPP_LOGITEM_MALLOC_FAILED: sapp_log_item = 1;
pub const sapp_log_item_SAPP_LOGITEM_MACOS_INVALID_NSOPENGL_PROFILE: sapp_log_item = 2;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_LOAD_OPENGL32_DLL_FAILED: sapp_log_item = 3;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_HELPER_WINDOW_FAILED: sapp_log_item = 4;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_HELPER_WINDOW_GETDC_FAILED: sapp_log_item = 5;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_SET_PIXELFORMAT_FAILED: sapp_log_item = 6;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_CREATE_DUMMY_CONTEXT_FAILED: sapp_log_item = 7;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_DUMMY_CONTEXT_MAKE_CURRENT_FAILED: sapp_log_item = 8;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_PIXELFORMAT_ATTRIB_FAILED: sapp_log_item = 9;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_FIND_PIXELFORMAT_FAILED: sapp_log_item = 10;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_DESCRIBE_PIXELFORMAT_FAILED: sapp_log_item = 11;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_SET_PIXELFORMAT_FAILED: sapp_log_item = 12;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_REQUIRED: sapp_log_item = 13;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_ARB_CREATE_CONTEXT_PROFILE_REQUIRED: sapp_log_item =
    14;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_3_2_NOT_SUPPORTED: sapp_log_item = 15;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_OPENGL_PROFILE_NOT_SUPPORTED: sapp_log_item = 16;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_INCOMPATIBLE_DEVICE_CONTEXT: sapp_log_item = 17;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_WGL_CREATE_CONTEXT_ATTRIBS_FAILED_OTHER: sapp_log_item =
    18;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_CREATE_DEVICE_AND_SWAPCHAIN_WITH_DEBUG_FAILED:
    sapp_log_item = 19;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIFACTORY_FAILED: sapp_log_item = 20;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_GET_IDXGIADAPTER_FAILED: sapp_log_item = 21;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_D3D11_QUERY_INTERFACE_IDXGIDEVICE1_FAILED:
    sapp_log_item = 22;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_LOCK:
    sapp_log_item = 23;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_REGISTER_RAW_INPUT_DEVICES_FAILED_MOUSE_UNLOCK:
    sapp_log_item = 24;
pub const sapp_log_item_SAPP_LOGITEM_WIN32_GET_RAW_INPUT_DATA_FAILED: sapp_log_item = 25;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_LIBGL_FAILED: sapp_log_item = 26;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_LOAD_ENTRY_POINTS_FAILED: sapp_log_item = 27;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_EXTENSION_NOT_FOUND: sapp_log_item = 28;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_QUERY_VERSION_FAILED: sapp_log_item = 29;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_VERSION_TOO_LOW: sapp_log_item = 30;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_GLXFBCONFIGS: sapp_log_item = 31;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_NO_SUITABLE_GLXFBCONFIG: sapp_log_item = 32;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_GET_VISUAL_FROM_FBCONFIG_FAILED: sapp_log_item = 33;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_REQUIRED_EXTENSIONS_MISSING: sapp_log_item = 34;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_CONTEXT_FAILED: sapp_log_item = 35;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_GLX_CREATE_WINDOW_FAILED: sapp_log_item = 36;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_CREATE_WINDOW_FAILED: sapp_log_item = 37;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_API_FAILED: sapp_log_item = 38;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_BIND_OPENGL_ES_API_FAILED: sapp_log_item = 39;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_DISPLAY_FAILED: sapp_log_item = 40;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_INITIALIZE_FAILED: sapp_log_item = 41;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_CONFIGS: sapp_log_item = 42;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_NO_NATIVE_VISUAL: sapp_log_item = 43;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_GET_VISUAL_INFO_FAILED: sapp_log_item = 44;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_WINDOW_SURFACE_FAILED: sapp_log_item = 45;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_CREATE_CONTEXT_FAILED: sapp_log_item = 46;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_EGL_MAKE_CURRENT_FAILED: sapp_log_item = 47;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_OPEN_DISPLAY_FAILED: sapp_log_item = 48;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_QUERY_SYSTEM_DPI_FAILED: sapp_log_item = 49;
pub const sapp_log_item_SAPP_LOGITEM_LINUX_X11_DROPPED_FILE_URI_WRONG_SCHEME: sapp_log_item = 50;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_INPUT_CB: sapp_log_item = 51;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNSUPPORTED_INPUT_EVENT_MAIN_CB: sapp_log_item = 52;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_READ_MSG_FAILED: sapp_log_item = 53;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_WRITE_MSG_FAILED: sapp_log_item = 54;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_CREATE: sapp_log_item = 55;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_RESUME: sapp_log_item = 56;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_PAUSE: sapp_log_item = 57;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_FOCUS: sapp_log_item = 58;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_NO_FOCUS: sapp_log_item = 59;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_NATIVE_WINDOW: sapp_log_item = 60;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_SET_INPUT_QUEUE: sapp_log_item = 61;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_MSG_DESTROY: sapp_log_item = 62;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_UNKNOWN_MSG: sapp_log_item = 63;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_STARTED: sapp_log_item = 64;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_LOOP_THREAD_DONE: sapp_log_item = 65;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTART: sapp_log_item = 66;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONRESUME: sapp_log_item = 67;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSAVEINSTANCESTATE: sapp_log_item =
    68;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONWINDOWFOCUSCHANGED: sapp_log_item =
    69;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONPAUSE: sapp_log_item = 70;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONSTOP: sapp_log_item = 71;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWCREATED: sapp_log_item =
    72;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONNATIVEWINDOWDESTROYED:
    sapp_log_item = 73;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUECREATED: sapp_log_item =
    74;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONINPUTQUEUEDESTROYED: sapp_log_item =
    75;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCONFIGURATIONCHANGED: sapp_log_item =
    76;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONLOWMEMORY: sapp_log_item = 77;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONDESTROY: sapp_log_item = 78;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_DONE: sapp_log_item = 79;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_ONCREATE: sapp_log_item = 80;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_CREATE_THREAD_PIPE_FAILED: sapp_log_item = 81;
pub const sapp_log_item_SAPP_LOGITEM_ANDROID_NATIVE_ACTIVITY_CREATE_SUCCESS: sapp_log_item = 82;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SURFACE_FAILED: sapp_log_item = 83;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_SWAPCHAIN_FAILED: sapp_log_item = 84;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_TEXTURE_FAILED:
    sapp_log_item = 85;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_DEPTH_STENCIL_VIEW_FAILED:
    sapp_log_item = 86;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_TEXTURE_FAILED: sapp_log_item = 87;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_SWAPCHAIN_CREATE_MSAA_VIEW_FAILED: sapp_log_item = 88;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_ERROR: sapp_log_item = 89;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_DEVICE_STATUS_UNKNOWN: sapp_log_item = 90;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNAVAILABLE: sapp_log_item = 91;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_ERROR: sapp_log_item = 92;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_REQUEST_ADAPTER_STATUS_UNKNOWN: sapp_log_item = 93;
pub const sapp_log_item_SAPP_LOGITEM_WGPU_CREATE_INSTANCE_FAILED: sapp_log_item = 94;
pub const sapp_log_item_SAPP_LOGITEM_IMAGE_DATA_SIZE_MISMATCH: sapp_log_item = 95;
pub const sapp_log_item_SAPP_LOGITEM_DROPPED_FILE_PATH_TOO_LONG: sapp_log_item = 96;
pub const sapp_log_item_SAPP_LOGITEM_CLIPBOARD_STRING_TOO_BIG: sapp_log_item = 97;
pub type sapp_log_item = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_logger"][::std::mem::size_of::<sapp_logger>() - 16usize];
    ["Alignment of sapp_logger"][::std::mem::align_of::<sapp_logger>() - 8usize];
    ["Offset of field: sapp_logger::func"][::std::mem::offset_of!(sapp_logger, func) - 0usize];
    ["Offset of field: sapp_logger::user_data"]
        [::std::mem::offset_of!(sapp_logger, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_desc {
    pub init_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub frame_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub cleanup_cb: ::std::option::Option<unsafe extern "C" fn()>,
    pub event_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_event)>,
    pub user_data: *mut ::std::os::raw::c_void,
    pub init_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub frame_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub cleanup_userdata_cb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub event_userdata_cb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const sapp_event, arg2: *mut ::std::os::raw::c_void),
    >,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub swap_interval: ::std::os::raw::c_int,
    pub high_dpi: bool,
    pub fullscreen: bool,
    pub alpha: bool,
    pub window_title: *const ::std::os::raw::c_char,
    pub enable_clipboard: bool,
    pub clipboard_size: ::std::os::raw::c_int,
    pub enable_dragndrop: bool,
    pub max_dropped_files: ::std::os::raw::c_int,
    pub max_dropped_file_path_length: ::std::os::raw::c_int,
    pub icon: sapp_icon_desc,
    pub allocator: sapp_allocator,
    pub logger: sapp_logger,
    pub gl_major_version: ::std::os::raw::c_int,
    pub gl_minor_version: ::std::os::raw::c_int,
    pub win32_console_utf8: bool,
    pub win32_console_create: bool,
    pub win32_console_attach: bool,
    pub html5_canvas_name: *const ::std::os::raw::c_char,
    pub html5_canvas_resize: bool,
    pub html5_preserve_drawing_buffer: bool,
    pub html5_premultiplied_alpha: bool,
    pub html5_ask_leave_site: bool,
    pub html5_bubble_mouse_events: bool,
    pub html5_bubble_touch_events: bool,
    pub html5_bubble_wheel_events: bool,
    pub html5_bubble_key_events: bool,
    pub html5_bubble_char_events: bool,
    pub html5_use_emsc_set_main_loop: bool,
    pub html5_emsc_set_main_loop_simulate_infinite_loop: bool,
    pub ios_keyboard_resizes_canvas: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_desc"][::std::mem::size_of::<sapp_desc>() - 408usize];
    ["Alignment of sapp_desc"][::std::mem::align_of::<sapp_desc>() - 8usize];
    ["Offset of field: sapp_desc::init_cb"][::std::mem::offset_of!(sapp_desc, init_cb) - 0usize];
    ["Offset of field: sapp_desc::frame_cb"][::std::mem::offset_of!(sapp_desc, frame_cb) - 8usize];
    ["Offset of field: sapp_desc::cleanup_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_cb) - 16usize];
    ["Offset of field: sapp_desc::event_cb"][::std::mem::offset_of!(sapp_desc, event_cb) - 24usize];
    ["Offset of field: sapp_desc::user_data"]
        [::std::mem::offset_of!(sapp_desc, user_data) - 32usize];
    ["Offset of field: sapp_desc::init_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, init_userdata_cb) - 40usize];
    ["Offset of field: sapp_desc::frame_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, frame_userdata_cb) - 48usize];
    ["Offset of field: sapp_desc::cleanup_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, cleanup_userdata_cb) - 56usize];
    ["Offset of field: sapp_desc::event_userdata_cb"]
        [::std::mem::offset_of!(sapp_desc, event_userdata_cb) - 64usize];
    ["Offset of field: sapp_desc::width"][::std::mem::offset_of!(sapp_desc, width) - 72usize];
    ["Offset of field: sapp_desc::height"][::std::mem::offset_of!(sapp_desc, height) - 76usize];
    ["Offset of field: sapp_desc::sample_count"]
        [::std::mem::offset_of!(sapp_desc, sample_count) - 80usize];
    ["Offset of field: sapp_desc::swap_interval"]
        [::std::mem::offset_of!(sapp_desc, swap_interval) - 84usize];
    ["Offset of field: sapp_desc::high_dpi"][::std::mem::offset_of!(sapp_desc, high_dpi) - 88usize];
    ["Offset of field: sapp_desc::fullscreen"]
        [::std::mem::offset_of!(sapp_desc, fullscreen) - 89usize];
    ["Offset of field: sapp_desc::alpha"][::std::mem::offset_of!(sapp_desc, alpha) - 90usize];
    ["Offset of field: sapp_desc::window_title"]
        [::std::mem::offset_of!(sapp_desc, window_title) - 96usize];
    ["Offset of field: sapp_desc::enable_clipboard"]
        [::std::mem::offset_of!(sapp_desc, enable_clipboard) - 104usize];
    ["Offset of field: sapp_desc::clipboard_size"]
        [::std::mem::offset_of!(sapp_desc, clipboard_size) - 108usize];
    ["Offset of field: sapp_desc::enable_dragndrop"]
        [::std::mem::offset_of!(sapp_desc, enable_dragndrop) - 112usize];
    ["Offset of field: sapp_desc::max_dropped_files"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_files) - 116usize];
    ["Offset of field: sapp_desc::max_dropped_file_path_length"]
        [::std::mem::offset_of!(sapp_desc, max_dropped_file_path_length) - 120usize];
    ["Offset of field: sapp_desc::icon"][::std::mem::offset_of!(sapp_desc, icon) - 128usize];
    ["Offset of field: sapp_desc::allocator"]
        [::std::mem::offset_of!(sapp_desc, allocator) - 328usize];
    ["Offset of field: sapp_desc::logger"][::std::mem::offset_of!(sapp_desc, logger) - 352usize];
    ["Offset of field: sapp_desc::gl_major_version"]
        [::std::mem::offset_of!(sapp_desc, gl_major_version) - 368usize];
    ["Offset of field: sapp_desc::gl_minor_version"]
        [::std::mem::offset_of!(sapp_desc, gl_minor_version) - 372usize];
    ["Offset of field: sapp_desc::win32_console_utf8"]
        [::std::mem::offset_of!(sapp_desc, win32_console_utf8) - 376usize];
    ["Offset of field: sapp_desc::win32_console_create"]
        [::std::mem::offset_of!(sapp_desc, win32_console_create) - 377usize];
    ["Offset of field: sapp_desc::win32_console_attach"]
        [::std::mem::offset_of!(sapp_desc, win32_console_attach) - 378usize];
    ["Offset of field: sapp_desc::html5_canvas_name"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_name) - 384usize];
    ["Offset of field: sapp_desc::html5_canvas_resize"]
        [::std::mem::offset_of!(sapp_desc, html5_canvas_resize) - 392usize];
    ["Offset of field: sapp_desc::html5_preserve_drawing_buffer"]
        [::std::mem::offset_of!(sapp_desc, html5_preserve_drawing_buffer) - 393usize];
    ["Offset of field: sapp_desc::html5_premultiplied_alpha"]
        [::std::mem::offset_of!(sapp_desc, html5_premultiplied_alpha) - 394usize];
    ["Offset of field: sapp_desc::html5_ask_leave_site"]
        [::std::mem::offset_of!(sapp_desc, html5_ask_leave_site) - 395usize];
    ["Offset of field: sapp_desc::html5_bubble_mouse_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_mouse_events) - 396usize];
    ["Offset of field: sapp_desc::html5_bubble_touch_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_touch_events) - 397usize];
    ["Offset of field: sapp_desc::html5_bubble_wheel_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_wheel_events) - 398usize];
    ["Offset of field: sapp_desc::html5_bubble_key_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_key_events) - 399usize];
    ["Offset of field: sapp_desc::html5_bubble_char_events"]
        [::std::mem::offset_of!(sapp_desc, html5_bubble_char_events) - 400usize];
    ["Offset of field: sapp_desc::html5_use_emsc_set_main_loop"]
        [::std::mem::offset_of!(sapp_desc, html5_use_emsc_set_main_loop) - 401usize];
    ["Offset of field: sapp_desc::html5_emsc_set_main_loop_simulate_infinite_loop"][::std::mem::offset_of!(
        sapp_desc,
        html5_emsc_set_main_loop_simulate_infinite_loop
    ) - 402usize];
    ["Offset of field: sapp_desc::ios_keyboard_resizes_canvas"]
        [::std::mem::offset_of!(sapp_desc, ios_keyboard_resizes_canvas) - 403usize];
};
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_NO_ERROR: sapp_html5_fetch_error = 0;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL: sapp_html5_fetch_error =
    1;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_OTHER: sapp_html5_fetch_error = 2;
pub type sapp_html5_fetch_error = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_response {
    pub succeeded: bool,
    pub error_code: sapp_html5_fetch_error,
    pub file_index: ::std::os::raw::c_int,
    pub data: sapp_range,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_response"]
        [::std::mem::size_of::<sapp_html5_fetch_response>() - 56usize];
    ["Alignment of sapp_html5_fetch_response"]
        [::std::mem::align_of::<sapp_html5_fetch_response>() - 8usize];
    ["Offset of field: sapp_html5_fetch_response::succeeded"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, succeeded) - 0usize];
    ["Offset of field: sapp_html5_fetch_response::error_code"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, error_code) - 4usize];
    ["Offset of field: sapp_html5_fetch_response::file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, file_index) - 8usize];
    ["Offset of field: sapp_html5_fetch_response::data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, data) - 16usize];
    ["Offset of field: sapp_html5_fetch_response::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, buffer) - 32usize];
    ["Offset of field: sapp_html5_fetch_response::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_response, user_data) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_html5_fetch_request {
    pub dropped_file_index: ::std::os::raw::c_int,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const sapp_html5_fetch_response)>,
    pub buffer: sapp_range,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sapp_html5_fetch_request"]
        [::std::mem::size_of::<sapp_html5_fetch_request>() - 40usize];
    ["Alignment of sapp_html5_fetch_request"]
        [::std::mem::align_of::<sapp_html5_fetch_request>() - 8usize];
    ["Offset of field: sapp_html5_fetch_request::dropped_file_index"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, dropped_file_index) - 0usize];
    ["Offset of field: sapp_html5_fetch_request::callback"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, callback) - 8usize];
    ["Offset of field: sapp_html5_fetch_request::buffer"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, buffer) - 16usize];
    ["Offset of field: sapp_html5_fetch_request::user_data"]
        [::std::mem::offset_of!(sapp_html5_fetch_request, user_data) - 32usize];
};
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_DEFAULT: sapp_mouse_cursor = 0;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_ARROW: sapp_mouse_cursor = 1;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_IBEAM: sapp_mouse_cursor = 2;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_CROSSHAIR: sapp_mouse_cursor = 3;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_POINTING_HAND: sapp_mouse_cursor = 4;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_EW: sapp_mouse_cursor = 5;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NS: sapp_mouse_cursor = 6;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NWSE: sapp_mouse_cursor = 7;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_NESW: sapp_mouse_cursor = 8;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_RESIZE_ALL: sapp_mouse_cursor = 9;
pub const sapp_mouse_cursor_SAPP_MOUSECURSOR_NOT_ALLOWED: sapp_mouse_cursor = 10;
pub const sapp_mouse_cursor__SAPP_MOUSECURSOR_NUM: sapp_mouse_cursor = 11;
pub type sapp_mouse_cursor = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn sokol_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sapp_width() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_widthf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_height() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_heightf() -> f32;
}
unsafe extern "C" {
    pub fn sapp_color_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_depth_format() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_sample_count() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_high_dpi() -> bool;
}
unsafe extern "C" {
    pub fn sapp_dpi_scale() -> f32;
}
unsafe extern "C" {
    pub fn sapp_show_keyboard(show: bool);
}
unsafe extern "C" {
    pub fn sapp_keyboard_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_is_fullscreen() -> bool;
}
unsafe extern "C" {
    pub fn sapp_toggle_fullscreen();
}
unsafe extern "C" {
    pub fn sapp_show_mouse(show: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_shown() -> bool;
}
unsafe extern "C" {
    pub fn sapp_lock_mouse(lock: bool);
}
unsafe extern "C" {
    pub fn sapp_mouse_locked() -> bool;
}
unsafe extern "C" {
    pub fn sapp_set_mouse_cursor(cursor: sapp_mouse_cursor);
}
unsafe extern "C" {
    pub fn sapp_get_mouse_cursor() -> sapp_mouse_cursor;
}
unsafe extern "C" {
    pub fn sapp_userdata() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_query_desc() -> sapp_desc;
}
unsafe extern "C" {
    pub fn sapp_request_quit();
}
unsafe extern "C" {
    pub fn sapp_cancel_quit();
}
unsafe extern "C" {
    pub fn sapp_quit();
}
unsafe extern "C" {
    pub fn sapp_consume_event();
}
unsafe extern "C" {
    pub fn sapp_frame_count() -> u64;
}
unsafe extern "C" {
    pub fn sapp_frame_duration() -> f64;
}
unsafe extern "C" {
    pub fn sapp_set_clipboard_string(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_get_clipboard_string() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_set_window_title(str_: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sapp_set_icon(icon_desc: *const sapp_icon_desc);
}
unsafe extern "C" {
    pub fn sapp_get_num_dropped_files() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sapp_get_dropped_file_path(
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sapp_run(desc: *const sapp_desc);
}
unsafe extern "C" {
    pub fn sapp_egl_get_display() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_egl_get_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_html5_ask_leave_site(ask: bool);
}
unsafe extern "C" {
    pub fn sapp_html5_get_dropped_file_size(index: ::std::os::raw::c_int) -> u32;
}
unsafe extern "C" {
    pub fn sapp_html5_fetch_dropped_file(request: *const sapp_html5_fetch_request);
}
unsafe extern "C" {
    pub fn sapp_metal_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_current_drawable() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_depth_stencil_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_metal_get_msaa_color_texture() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_macos_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_ios_get_window() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_swap_chain() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_d3d11_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_win32_get_hwnd() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_render_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_resolve_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_wgpu_get_depth_stencil_view() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sapp_gl_get_framebuffer() -> u32;
}
unsafe extern "C" {
    pub fn sapp_android_get_native_activity() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn slog_func(
        tag: *const ::std::os::raw::c_char,
        log_level: u32,
        log_item: u32,
        message: *const ::std::os::raw::c_char,
        line_nr: u32,
        filename: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn stm_setup();
}
unsafe extern "C" {
    pub fn stm_now() -> u64;
}
unsafe extern "C" {
    pub fn stm_diff(new_ticks: u64, old_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_since(start_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_laptime(last_time: *mut u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_round_to_common_refresh_rate(frame_ticks: u64) -> u64;
}
unsafe extern "C" {
    pub fn stm_sec(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ms(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_us(ticks: u64) -> f64;
}
unsafe extern "C" {
    pub fn stm_ns(ticks: u64) -> f64;
}
pub type rsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer"][::std::mem::size_of::<sg_buffer>() - 4usize];
    ["Alignment of sg_buffer"][::std::mem::align_of::<sg_buffer>() - 4usize];
    ["Offset of field: sg_buffer::id"][::std::mem::offset_of!(sg_buffer, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image"][::std::mem::size_of::<sg_image>() - 4usize];
    ["Alignment of sg_image"][::std::mem::align_of::<sg_image>() - 4usize];
    ["Offset of field: sg_image::id"][::std::mem::offset_of!(sg_image, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler"][::std::mem::size_of::<sg_sampler>() - 4usize];
    ["Alignment of sg_sampler"][::std::mem::align_of::<sg_sampler>() - 4usize];
    ["Offset of field: sg_sampler::id"][::std::mem::offset_of!(sg_sampler, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader"][::std::mem::size_of::<sg_shader>() - 4usize];
    ["Alignment of sg_shader"][::std::mem::align_of::<sg_shader>() - 4usize];
    ["Offset of field: sg_shader::id"][::std::mem::offset_of!(sg_shader, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline"][::std::mem::size_of::<sg_pipeline>() - 4usize];
    ["Alignment of sg_pipeline"][::std::mem::align_of::<sg_pipeline>() - 4usize];
    ["Offset of field: sg_pipeline::id"][::std::mem::offset_of!(sg_pipeline, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments {
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments"][::std::mem::size_of::<sg_attachments>() - 4usize];
    ["Alignment of sg_attachments"][::std::mem::align_of::<sg_attachments>() - 4usize];
    ["Offset of field: sg_attachments::id"][::std::mem::offset_of!(sg_attachments, id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_range {
    pub ptr: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_range"][::std::mem::size_of::<sg_range>() - 16usize];
    ["Alignment of sg_range"][::std::mem::align_of::<sg_range>() - 8usize];
    ["Offset of field: sg_range::ptr"][::std::mem::offset_of!(sg_range, ptr) - 0usize];
    ["Offset of field: sg_range::size"][::std::mem::offset_of!(sg_range, size) - 8usize];
};
pub const SG_INVALID_ID: _bindgen_ty_3 = 0;
pub const SG_NUM_SHADER_STAGES: _bindgen_ty_3 = 2;
pub const SG_NUM_INFLIGHT_FRAMES: _bindgen_ty_3 = 2;
pub const SG_MAX_COLOR_ATTACHMENTS: _bindgen_ty_3 = 4;
pub const SG_MAX_VERTEX_BUFFERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGES: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_SAMPLERS: _bindgen_ty_3 = 8;
pub const SG_MAX_SHADERSTAGE_IMAGESAMPLERPAIRS: _bindgen_ty_3 = 12;
pub const SG_MAX_SHADERSTAGE_UBS: _bindgen_ty_3 = 4;
pub const SG_MAX_UB_MEMBERS: _bindgen_ty_3 = 16;
pub const SG_MAX_VERTEX_ATTRIBUTES: _bindgen_ty_3 = 16;
pub const SG_MAX_MIPMAPS: _bindgen_ty_3 = 16;
pub const SG_MAX_TEXTUREARRAY_LAYERS: _bindgen_ty_3 = 128;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color"][::std::mem::size_of::<sg_color>() - 16usize];
    ["Alignment of sg_color"][::std::mem::align_of::<sg_color>() - 4usize];
    ["Offset of field: sg_color::r"][::std::mem::offset_of!(sg_color, r) - 0usize];
    ["Offset of field: sg_color::g"][::std::mem::offset_of!(sg_color, g) - 4usize];
    ["Offset of field: sg_color::b"][::std::mem::offset_of!(sg_color, b) - 8usize];
    ["Offset of field: sg_color::a"][::std::mem::offset_of!(sg_color, a) - 12usize];
};
pub const sg_backend_SG_BACKEND_GLCORE33: sg_backend = 0;
pub const sg_backend_SG_BACKEND_GLES3: sg_backend = 1;
pub const sg_backend_SG_BACKEND_D3D11: sg_backend = 2;
pub const sg_backend_SG_BACKEND_METAL_IOS: sg_backend = 3;
pub const sg_backend_SG_BACKEND_METAL_MACOS: sg_backend = 4;
pub const sg_backend_SG_BACKEND_METAL_SIMULATOR: sg_backend = 5;
pub const sg_backend_SG_BACKEND_WGPU: sg_backend = 6;
pub const sg_backend_SG_BACKEND_DUMMY: sg_backend = 7;
pub type sg_backend = ::std::os::raw::c_uint;
pub const sg_pixel_format__SG_PIXELFORMAT_DEFAULT: sg_pixel_format = 0;
pub const sg_pixel_format_SG_PIXELFORMAT_NONE: sg_pixel_format = 1;
pub const sg_pixel_format_SG_PIXELFORMAT_R8: sg_pixel_format = 2;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SN: sg_pixel_format = 3;
pub const sg_pixel_format_SG_PIXELFORMAT_R8UI: sg_pixel_format = 4;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SI: sg_pixel_format = 5;
pub const sg_pixel_format_SG_PIXELFORMAT_R16: sg_pixel_format = 6;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SN: sg_pixel_format = 7;
pub const sg_pixel_format_SG_PIXELFORMAT_R16UI: sg_pixel_format = 8;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SI: sg_pixel_format = 9;
pub const sg_pixel_format_SG_PIXELFORMAT_R16F: sg_pixel_format = 10;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8: sg_pixel_format = 11;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SN: sg_pixel_format = 12;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8UI: sg_pixel_format = 13;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SI: sg_pixel_format = 14;
pub const sg_pixel_format_SG_PIXELFORMAT_R32UI: sg_pixel_format = 15;
pub const sg_pixel_format_SG_PIXELFORMAT_R32SI: sg_pixel_format = 16;
pub const sg_pixel_format_SG_PIXELFORMAT_R32F: sg_pixel_format = 17;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16: sg_pixel_format = 18;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SN: sg_pixel_format = 19;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16UI: sg_pixel_format = 20;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SI: sg_pixel_format = 21;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16F: sg_pixel_format = 22;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8: sg_pixel_format = 23;
pub const sg_pixel_format_SG_PIXELFORMAT_SRGB8A8: sg_pixel_format = 24;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SN: sg_pixel_format = 25;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8UI: sg_pixel_format = 26;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SI: sg_pixel_format = 27;
pub const sg_pixel_format_SG_PIXELFORMAT_BGRA8: sg_pixel_format = 28;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB10A2: sg_pixel_format = 29;
pub const sg_pixel_format_SG_PIXELFORMAT_RG11B10F: sg_pixel_format = 30;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB9E5: sg_pixel_format = 31;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32UI: sg_pixel_format = 32;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32SI: sg_pixel_format = 33;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32F: sg_pixel_format = 34;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16: sg_pixel_format = 35;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SN: sg_pixel_format = 36;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16UI: sg_pixel_format = 37;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SI: sg_pixel_format = 38;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16F: sg_pixel_format = 39;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32UI: sg_pixel_format = 40;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32SI: sg_pixel_format = 41;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32F: sg_pixel_format = 42;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH: sg_pixel_format = 43;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH_STENCIL: sg_pixel_format = 44;
pub const sg_pixel_format_SG_PIXELFORMAT_BC1_RGBA: sg_pixel_format = 45;
pub const sg_pixel_format_SG_PIXELFORMAT_BC2_RGBA: sg_pixel_format = 46;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_RGBA: sg_pixel_format = 47;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_SRGBA: sg_pixel_format = 48;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_R: sg_pixel_format = 49;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_RSN: sg_pixel_format = 50;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RG: sg_pixel_format = 51;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RGSN: sg_pixel_format = 52;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBF: sg_pixel_format = 53;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBUF: sg_pixel_format = 54;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_RGBA: sg_pixel_format = 55;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_SRGBA: sg_pixel_format = 56;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_2BPP: sg_pixel_format = 57;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_4BPP: sg_pixel_format = 58;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_2BPP: sg_pixel_format = 59;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_4BPP: sg_pixel_format = 60;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8: sg_pixel_format = 61;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8: sg_pixel_format = 62;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8A1: sg_pixel_format = 63;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGBA8: sg_pixel_format = 64;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_SRGB8A8: sg_pixel_format = 65;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11: sg_pixel_format = 66;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11SN: sg_pixel_format = 67;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_RGBA: sg_pixel_format = 68;
pub const sg_pixel_format_SG_PIXELFORMAT_ASTC_4x4_SRGBA: sg_pixel_format = 69;
pub const sg_pixel_format__SG_PIXELFORMAT_NUM: sg_pixel_format = 70;
pub const sg_pixel_format__SG_PIXELFORMAT_FORCE_U32: sg_pixel_format = 2147483647;
pub type sg_pixel_format = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pixelformat_info {
    pub sample: bool,
    pub filter: bool,
    pub render: bool,
    pub blend: bool,
    pub msaa: bool,
    pub depth: bool,
    pub compressed: bool,
    pub bytes_per_pixel: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pixelformat_info"][::std::mem::size_of::<sg_pixelformat_info>() - 12usize];
    ["Alignment of sg_pixelformat_info"][::std::mem::align_of::<sg_pixelformat_info>() - 4usize];
    ["Offset of field: sg_pixelformat_info::sample"]
        [::std::mem::offset_of!(sg_pixelformat_info, sample) - 0usize];
    ["Offset of field: sg_pixelformat_info::filter"]
        [::std::mem::offset_of!(sg_pixelformat_info, filter) - 1usize];
    ["Offset of field: sg_pixelformat_info::render"]
        [::std::mem::offset_of!(sg_pixelformat_info, render) - 2usize];
    ["Offset of field: sg_pixelformat_info::blend"]
        [::std::mem::offset_of!(sg_pixelformat_info, blend) - 3usize];
    ["Offset of field: sg_pixelformat_info::msaa"]
        [::std::mem::offset_of!(sg_pixelformat_info, msaa) - 4usize];
    ["Offset of field: sg_pixelformat_info::depth"]
        [::std::mem::offset_of!(sg_pixelformat_info, depth) - 5usize];
    ["Offset of field: sg_pixelformat_info::compressed"]
        [::std::mem::offset_of!(sg_pixelformat_info, compressed) - 6usize];
    ["Offset of field: sg_pixelformat_info::bytes_per_pixel"]
        [::std::mem::offset_of!(sg_pixelformat_info, bytes_per_pixel) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_features {
    pub origin_top_left: bool,
    pub image_clamp_to_border: bool,
    pub mrt_independent_blend_state: bool,
    pub mrt_independent_write_mask: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_features"][::std::mem::size_of::<sg_features>() - 4usize];
    ["Alignment of sg_features"][::std::mem::align_of::<sg_features>() - 1usize];
    ["Offset of field: sg_features::origin_top_left"]
        [::std::mem::offset_of!(sg_features, origin_top_left) - 0usize];
    ["Offset of field: sg_features::image_clamp_to_border"]
        [::std::mem::offset_of!(sg_features, image_clamp_to_border) - 1usize];
    ["Offset of field: sg_features::mrt_independent_blend_state"]
        [::std::mem::offset_of!(sg_features, mrt_independent_blend_state) - 2usize];
    ["Offset of field: sg_features::mrt_independent_write_mask"]
        [::std::mem::offset_of!(sg_features, mrt_independent_write_mask) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_limits {
    pub max_image_size_2d: ::std::os::raw::c_int,
    pub max_image_size_cube: ::std::os::raw::c_int,
    pub max_image_size_3d: ::std::os::raw::c_int,
    pub max_image_size_array: ::std::os::raw::c_int,
    pub max_image_array_layers: ::std::os::raw::c_int,
    pub max_vertex_attrs: ::std::os::raw::c_int,
    pub gl_max_vertex_uniform_components: ::std::os::raw::c_int,
    pub gl_max_combined_texture_image_units: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_limits"][::std::mem::size_of::<sg_limits>() - 32usize];
    ["Alignment of sg_limits"][::std::mem::align_of::<sg_limits>() - 4usize];
    ["Offset of field: sg_limits::max_image_size_2d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_2d) - 0usize];
    ["Offset of field: sg_limits::max_image_size_cube"]
        [::std::mem::offset_of!(sg_limits, max_image_size_cube) - 4usize];
    ["Offset of field: sg_limits::max_image_size_3d"]
        [::std::mem::offset_of!(sg_limits, max_image_size_3d) - 8usize];
    ["Offset of field: sg_limits::max_image_size_array"]
        [::std::mem::offset_of!(sg_limits, max_image_size_array) - 12usize];
    ["Offset of field: sg_limits::max_image_array_layers"]
        [::std::mem::offset_of!(sg_limits, max_image_array_layers) - 16usize];
    ["Offset of field: sg_limits::max_vertex_attrs"]
        [::std::mem::offset_of!(sg_limits, max_vertex_attrs) - 20usize];
    ["Offset of field: sg_limits::gl_max_vertex_uniform_components"]
        [::std::mem::offset_of!(sg_limits, gl_max_vertex_uniform_components) - 24usize];
    ["Offset of field: sg_limits::gl_max_combined_texture_image_units"]
        [::std::mem::offset_of!(sg_limits, gl_max_combined_texture_image_units) - 28usize];
};
pub const sg_resource_state_SG_RESOURCESTATE_INITIAL: sg_resource_state = 0;
pub const sg_resource_state_SG_RESOURCESTATE_ALLOC: sg_resource_state = 1;
pub const sg_resource_state_SG_RESOURCESTATE_VALID: sg_resource_state = 2;
pub const sg_resource_state_SG_RESOURCESTATE_FAILED: sg_resource_state = 3;
pub const sg_resource_state_SG_RESOURCESTATE_INVALID: sg_resource_state = 4;
pub const sg_resource_state__SG_RESOURCESTATE_FORCE_U32: sg_resource_state = 2147483647;
pub type sg_resource_state = ::std::os::raw::c_uint;
pub const sg_usage__SG_USAGE_DEFAULT: sg_usage = 0;
pub const sg_usage_SG_USAGE_IMMUTABLE: sg_usage = 1;
pub const sg_usage_SG_USAGE_DYNAMIC: sg_usage = 2;
pub const sg_usage_SG_USAGE_STREAM: sg_usage = 3;
pub const sg_usage__SG_USAGE_NUM: sg_usage = 4;
pub const sg_usage__SG_USAGE_FORCE_U32: sg_usage = 2147483647;
pub type sg_usage = ::std::os::raw::c_uint;
pub const sg_buffer_type__SG_BUFFERTYPE_DEFAULT: sg_buffer_type = 0;
pub const sg_buffer_type_SG_BUFFERTYPE_VERTEXBUFFER: sg_buffer_type = 1;
pub const sg_buffer_type_SG_BUFFERTYPE_INDEXBUFFER: sg_buffer_type = 2;
pub const sg_buffer_type__SG_BUFFERTYPE_NUM: sg_buffer_type = 3;
pub const sg_buffer_type__SG_BUFFERTYPE_FORCE_U32: sg_buffer_type = 2147483647;
pub type sg_buffer_type = ::std::os::raw::c_uint;
pub const sg_index_type__SG_INDEXTYPE_DEFAULT: sg_index_type = 0;
pub const sg_index_type_SG_INDEXTYPE_NONE: sg_index_type = 1;
pub const sg_index_type_SG_INDEXTYPE_UINT16: sg_index_type = 2;
pub const sg_index_type_SG_INDEXTYPE_UINT32: sg_index_type = 3;
pub const sg_index_type__SG_INDEXTYPE_NUM: sg_index_type = 4;
pub const sg_index_type__SG_INDEXTYPE_FORCE_U32: sg_index_type = 2147483647;
pub type sg_index_type = ::std::os::raw::c_uint;
pub const sg_image_type__SG_IMAGETYPE_DEFAULT: sg_image_type = 0;
pub const sg_image_type_SG_IMAGETYPE_2D: sg_image_type = 1;
pub const sg_image_type_SG_IMAGETYPE_CUBE: sg_image_type = 2;
pub const sg_image_type_SG_IMAGETYPE_3D: sg_image_type = 3;
pub const sg_image_type_SG_IMAGETYPE_ARRAY: sg_image_type = 4;
pub const sg_image_type__SG_IMAGETYPE_NUM: sg_image_type = 5;
pub const sg_image_type__SG_IMAGETYPE_FORCE_U32: sg_image_type = 2147483647;
pub type sg_image_type = ::std::os::raw::c_uint;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_DEFAULT: sg_image_sample_type = 0;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_FLOAT: sg_image_sample_type = 1;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_DEPTH: sg_image_sample_type = 2;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_SINT: sg_image_sample_type = 3;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UINT: sg_image_sample_type = 4;
pub const sg_image_sample_type_SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT: sg_image_sample_type = 5;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_NUM: sg_image_sample_type = 6;
pub const sg_image_sample_type__SG_IMAGESAMPLETYPE_FORCE_U32: sg_image_sample_type = 2147483647;
pub type sg_image_sample_type = ::std::os::raw::c_uint;
pub const sg_sampler_type__SG_SAMPLERTYPE_DEFAULT: sg_sampler_type = 0;
pub const sg_sampler_type_SG_SAMPLERTYPE_FILTERING: sg_sampler_type = 1;
pub const sg_sampler_type_SG_SAMPLERTYPE_NONFILTERING: sg_sampler_type = 2;
pub const sg_sampler_type_SG_SAMPLERTYPE_COMPARISON: sg_sampler_type = 3;
pub const sg_sampler_type__SG_SAMPLERTYPE_NUM: sg_sampler_type = 4;
pub const sg_sampler_type__SG_SAMPLERTYPE_FORCE_U32: sg_sampler_type = 5;
pub type sg_sampler_type = ::std::os::raw::c_uint;
pub const sg_cube_face_SG_CUBEFACE_POS_X: sg_cube_face = 0;
pub const sg_cube_face_SG_CUBEFACE_NEG_X: sg_cube_face = 1;
pub const sg_cube_face_SG_CUBEFACE_POS_Y: sg_cube_face = 2;
pub const sg_cube_face_SG_CUBEFACE_NEG_Y: sg_cube_face = 3;
pub const sg_cube_face_SG_CUBEFACE_POS_Z: sg_cube_face = 4;
pub const sg_cube_face_SG_CUBEFACE_NEG_Z: sg_cube_face = 5;
pub const sg_cube_face_SG_CUBEFACE_NUM: sg_cube_face = 6;
pub const sg_cube_face__SG_CUBEFACE_FORCE_U32: sg_cube_face = 2147483647;
pub type sg_cube_face = ::std::os::raw::c_uint;
pub const sg_shader_stage_SG_SHADERSTAGE_VS: sg_shader_stage = 0;
pub const sg_shader_stage_SG_SHADERSTAGE_FS: sg_shader_stage = 1;
pub const sg_shader_stage__SG_SHADERSTAGE_FORCE_U32: sg_shader_stage = 2147483647;
pub type sg_shader_stage = ::std::os::raw::c_uint;
pub const sg_primitive_type__SG_PRIMITIVETYPE_DEFAULT: sg_primitive_type = 0;
pub const sg_primitive_type_SG_PRIMITIVETYPE_POINTS: sg_primitive_type = 1;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINES: sg_primitive_type = 2;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINE_STRIP: sg_primitive_type = 3;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLES: sg_primitive_type = 4;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLE_STRIP: sg_primitive_type = 5;
pub const sg_primitive_type__SG_PRIMITIVETYPE_NUM: sg_primitive_type = 6;
pub const sg_primitive_type__SG_PRIMITIVETYPE_FORCE_U32: sg_primitive_type = 2147483647;
pub type sg_primitive_type = ::std::os::raw::c_uint;
pub const sg_filter__SG_FILTER_DEFAULT: sg_filter = 0;
pub const sg_filter_SG_FILTER_NONE: sg_filter = 1;
pub const sg_filter_SG_FILTER_NEAREST: sg_filter = 2;
pub const sg_filter_SG_FILTER_LINEAR: sg_filter = 3;
pub const sg_filter__SG_FILTER_NUM: sg_filter = 4;
pub const sg_filter__SG_FILTER_FORCE_U32: sg_filter = 2147483647;
pub type sg_filter = ::std::os::raw::c_uint;
pub const sg_wrap__SG_WRAP_DEFAULT: sg_wrap = 0;
pub const sg_wrap_SG_WRAP_REPEAT: sg_wrap = 1;
pub const sg_wrap_SG_WRAP_CLAMP_TO_EDGE: sg_wrap = 2;
pub const sg_wrap_SG_WRAP_CLAMP_TO_BORDER: sg_wrap = 3;
pub const sg_wrap_SG_WRAP_MIRRORED_REPEAT: sg_wrap = 4;
pub const sg_wrap__SG_WRAP_NUM: sg_wrap = 5;
pub const sg_wrap__SG_WRAP_FORCE_U32: sg_wrap = 2147483647;
pub type sg_wrap = ::std::os::raw::c_uint;
pub const sg_border_color__SG_BORDERCOLOR_DEFAULT: sg_border_color = 0;
pub const sg_border_color_SG_BORDERCOLOR_TRANSPARENT_BLACK: sg_border_color = 1;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_BLACK: sg_border_color = 2;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_WHITE: sg_border_color = 3;
pub const sg_border_color__SG_BORDERCOLOR_NUM: sg_border_color = 4;
pub const sg_border_color__SG_BORDERCOLOR_FORCE_U32: sg_border_color = 2147483647;
pub type sg_border_color = ::std::os::raw::c_uint;
pub const sg_vertex_format_SG_VERTEXFORMAT_INVALID: sg_vertex_format = 0;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT: sg_vertex_format = 1;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT2: sg_vertex_format = 2;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT3: sg_vertex_format = 3;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT4: sg_vertex_format = 4;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4: sg_vertex_format = 5;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4N: sg_vertex_format = 6;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4: sg_vertex_format = 7;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4N: sg_vertex_format = 8;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2: sg_vertex_format = 9;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2N: sg_vertex_format = 10;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT2N: sg_vertex_format = 11;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4: sg_vertex_format = 12;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4N: sg_vertex_format = 13;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT4N: sg_vertex_format = 14;
pub const sg_vertex_format_SG_VERTEXFORMAT_UINT10_N2: sg_vertex_format = 15;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF2: sg_vertex_format = 16;
pub const sg_vertex_format_SG_VERTEXFORMAT_HALF4: sg_vertex_format = 17;
pub const sg_vertex_format__SG_VERTEXFORMAT_NUM: sg_vertex_format = 18;
pub const sg_vertex_format__SG_VERTEXFORMAT_FORCE_U32: sg_vertex_format = 2147483647;
pub type sg_vertex_format = ::std::os::raw::c_uint;
pub const sg_vertex_step__SG_VERTEXSTEP_DEFAULT: sg_vertex_step = 0;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_VERTEX: sg_vertex_step = 1;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_INSTANCE: sg_vertex_step = 2;
pub const sg_vertex_step__SG_VERTEXSTEP_NUM: sg_vertex_step = 3;
pub const sg_vertex_step__SG_VERTEXSTEP_FORCE_U32: sg_vertex_step = 2147483647;
pub type sg_vertex_step = ::std::os::raw::c_uint;
pub const sg_uniform_type_SG_UNIFORMTYPE_INVALID: sg_uniform_type = 0;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT: sg_uniform_type = 1;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT2: sg_uniform_type = 2;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT3: sg_uniform_type = 3;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT4: sg_uniform_type = 4;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT: sg_uniform_type = 5;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT2: sg_uniform_type = 6;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT3: sg_uniform_type = 7;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT4: sg_uniform_type = 8;
pub const sg_uniform_type_SG_UNIFORMTYPE_MAT4: sg_uniform_type = 9;
pub const sg_uniform_type__SG_UNIFORMTYPE_NUM: sg_uniform_type = 10;
pub const sg_uniform_type__SG_UNIFORMTYPE_FORCE_U32: sg_uniform_type = 2147483647;
pub type sg_uniform_type = ::std::os::raw::c_uint;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_DEFAULT: sg_uniform_layout = 0;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_NATIVE: sg_uniform_layout = 1;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_STD140: sg_uniform_layout = 2;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_NUM: sg_uniform_layout = 3;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_FORCE_U32: sg_uniform_layout = 2147483647;
pub type sg_uniform_layout = ::std::os::raw::c_uint;
pub const sg_cull_mode__SG_CULLMODE_DEFAULT: sg_cull_mode = 0;
pub const sg_cull_mode_SG_CULLMODE_NONE: sg_cull_mode = 1;
pub const sg_cull_mode_SG_CULLMODE_FRONT: sg_cull_mode = 2;
pub const sg_cull_mode_SG_CULLMODE_BACK: sg_cull_mode = 3;
pub const sg_cull_mode__SG_CULLMODE_NUM: sg_cull_mode = 4;
pub const sg_cull_mode__SG_CULLMODE_FORCE_U32: sg_cull_mode = 2147483647;
pub type sg_cull_mode = ::std::os::raw::c_uint;
pub const sg_face_winding__SG_FACEWINDING_DEFAULT: sg_face_winding = 0;
pub const sg_face_winding_SG_FACEWINDING_CCW: sg_face_winding = 1;
pub const sg_face_winding_SG_FACEWINDING_CW: sg_face_winding = 2;
pub const sg_face_winding__SG_FACEWINDING_NUM: sg_face_winding = 3;
pub const sg_face_winding__SG_FACEWINDING_FORCE_U32: sg_face_winding = 2147483647;
pub type sg_face_winding = ::std::os::raw::c_uint;
pub const sg_compare_func__SG_COMPAREFUNC_DEFAULT: sg_compare_func = 0;
pub const sg_compare_func_SG_COMPAREFUNC_NEVER: sg_compare_func = 1;
pub const sg_compare_func_SG_COMPAREFUNC_LESS: sg_compare_func = 2;
pub const sg_compare_func_SG_COMPAREFUNC_EQUAL: sg_compare_func = 3;
pub const sg_compare_func_SG_COMPAREFUNC_LESS_EQUAL: sg_compare_func = 4;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER: sg_compare_func = 5;
pub const sg_compare_func_SG_COMPAREFUNC_NOT_EQUAL: sg_compare_func = 6;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER_EQUAL: sg_compare_func = 7;
pub const sg_compare_func_SG_COMPAREFUNC_ALWAYS: sg_compare_func = 8;
pub const sg_compare_func__SG_COMPAREFUNC_NUM: sg_compare_func = 9;
pub const sg_compare_func__SG_COMPAREFUNC_FORCE_U32: sg_compare_func = 2147483647;
pub type sg_compare_func = ::std::os::raw::c_uint;
pub const sg_stencil_op__SG_STENCILOP_DEFAULT: sg_stencil_op = 0;
pub const sg_stencil_op_SG_STENCILOP_KEEP: sg_stencil_op = 1;
pub const sg_stencil_op_SG_STENCILOP_ZERO: sg_stencil_op = 2;
pub const sg_stencil_op_SG_STENCILOP_REPLACE: sg_stencil_op = 3;
pub const sg_stencil_op_SG_STENCILOP_INCR_CLAMP: sg_stencil_op = 4;
pub const sg_stencil_op_SG_STENCILOP_DECR_CLAMP: sg_stencil_op = 5;
pub const sg_stencil_op_SG_STENCILOP_INVERT: sg_stencil_op = 6;
pub const sg_stencil_op_SG_STENCILOP_INCR_WRAP: sg_stencil_op = 7;
pub const sg_stencil_op_SG_STENCILOP_DECR_WRAP: sg_stencil_op = 8;
pub const sg_stencil_op__SG_STENCILOP_NUM: sg_stencil_op = 9;
pub const sg_stencil_op__SG_STENCILOP_FORCE_U32: sg_stencil_op = 2147483647;
pub type sg_stencil_op = ::std::os::raw::c_uint;
pub const sg_blend_factor__SG_BLENDFACTOR_DEFAULT: sg_blend_factor = 0;
pub const sg_blend_factor_SG_BLENDFACTOR_ZERO: sg_blend_factor = 1;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE: sg_blend_factor = 2;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_COLOR: sg_blend_factor = 3;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR: sg_blend_factor = 4;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA: sg_blend_factor = 5;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: sg_blend_factor = 6;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_COLOR: sg_blend_factor = 7;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_COLOR: sg_blend_factor = 8;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_ALPHA: sg_blend_factor = 9;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA: sg_blend_factor = 10;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA_SATURATED: sg_blend_factor = 11;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_COLOR: sg_blend_factor = 12;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR: sg_blend_factor = 13;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_ALPHA: sg_blend_factor = 14;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA: sg_blend_factor = 15;
pub const sg_blend_factor__SG_BLENDFACTOR_NUM: sg_blend_factor = 16;
pub const sg_blend_factor__SG_BLENDFACTOR_FORCE_U32: sg_blend_factor = 2147483647;
pub type sg_blend_factor = ::std::os::raw::c_uint;
pub const sg_blend_op__SG_BLENDOP_DEFAULT: sg_blend_op = 0;
pub const sg_blend_op_SG_BLENDOP_ADD: sg_blend_op = 1;
pub const sg_blend_op_SG_BLENDOP_SUBTRACT: sg_blend_op = 2;
pub const sg_blend_op_SG_BLENDOP_REVERSE_SUBTRACT: sg_blend_op = 3;
pub const sg_blend_op__SG_BLENDOP_NUM: sg_blend_op = 4;
pub const sg_blend_op__SG_BLENDOP_FORCE_U32: sg_blend_op = 2147483647;
pub type sg_blend_op = ::std::os::raw::c_uint;
pub const sg_color_mask__SG_COLORMASK_DEFAULT: sg_color_mask = 0;
pub const sg_color_mask_SG_COLORMASK_NONE: sg_color_mask = 16;
pub const sg_color_mask_SG_COLORMASK_R: sg_color_mask = 1;
pub const sg_color_mask_SG_COLORMASK_G: sg_color_mask = 2;
pub const sg_color_mask_SG_COLORMASK_RG: sg_color_mask = 3;
pub const sg_color_mask_SG_COLORMASK_B: sg_color_mask = 4;
pub const sg_color_mask_SG_COLORMASK_RB: sg_color_mask = 5;
pub const sg_color_mask_SG_COLORMASK_GB: sg_color_mask = 6;
pub const sg_color_mask_SG_COLORMASK_RGB: sg_color_mask = 7;
pub const sg_color_mask_SG_COLORMASK_A: sg_color_mask = 8;
pub const sg_color_mask_SG_COLORMASK_RA: sg_color_mask = 9;
pub const sg_color_mask_SG_COLORMASK_GA: sg_color_mask = 10;
pub const sg_color_mask_SG_COLORMASK_RGA: sg_color_mask = 11;
pub const sg_color_mask_SG_COLORMASK_BA: sg_color_mask = 12;
pub const sg_color_mask_SG_COLORMASK_RBA: sg_color_mask = 13;
pub const sg_color_mask_SG_COLORMASK_GBA: sg_color_mask = 14;
pub const sg_color_mask_SG_COLORMASK_RGBA: sg_color_mask = 15;
pub const sg_color_mask__SG_COLORMASK_FORCE_U32: sg_color_mask = 2147483647;
pub type sg_color_mask = ::std::os::raw::c_uint;
pub const sg_load_action__SG_LOADACTION_DEFAULT: sg_load_action = 0;
pub const sg_load_action_SG_LOADACTION_CLEAR: sg_load_action = 1;
pub const sg_load_action_SG_LOADACTION_LOAD: sg_load_action = 2;
pub const sg_load_action_SG_LOADACTION_DONTCARE: sg_load_action = 3;
pub const sg_load_action__SG_LOADACTION_FORCE_U32: sg_load_action = 2147483647;
pub type sg_load_action = ::std::os::raw::c_uint;
pub const sg_store_action__SG_STOREACTION_DEFAULT: sg_store_action = 0;
pub const sg_store_action_SG_STOREACTION_STORE: sg_store_action = 1;
pub const sg_store_action_SG_STOREACTION_DONTCARE: sg_store_action = 2;
pub const sg_store_action__SG_STOREACTION_FORCE_U32: sg_store_action = 2147483647;
pub type sg_store_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: sg_color,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_attachment_action"]
        [::std::mem::size_of::<sg_color_attachment_action>() - 24usize];
    ["Alignment of sg_color_attachment_action"]
        [::std::mem::align_of::<sg_color_attachment_action>() - 4usize];
    ["Offset of field: sg_color_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_color_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_color_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_color_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_color_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_attachment_action"]
        [::std::mem::size_of::<sg_depth_attachment_action>() - 12usize];
    ["Alignment of sg_depth_attachment_action"]
        [::std::mem::align_of::<sg_depth_attachment_action>() - 4usize];
    ["Offset of field: sg_depth_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_depth_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_depth_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_depth_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_depth_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_attachment_action {
    pub load_action: sg_load_action,
    pub store_action: sg_store_action,
    pub clear_value: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_attachment_action"]
        [::std::mem::size_of::<sg_stencil_attachment_action>() - 12usize];
    ["Alignment of sg_stencil_attachment_action"]
        [::std::mem::align_of::<sg_stencil_attachment_action>() - 4usize];
    ["Offset of field: sg_stencil_attachment_action::load_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, load_action) - 0usize];
    ["Offset of field: sg_stencil_attachment_action::store_action"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, store_action) - 4usize];
    ["Offset of field: sg_stencil_attachment_action::clear_value"]
        [::std::mem::offset_of!(sg_stencil_attachment_action, clear_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass_action {
    pub colors: [sg_color_attachment_action; 4usize],
    pub depth: sg_depth_attachment_action,
    pub stencil: sg_stencil_attachment_action,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass_action"][::std::mem::size_of::<sg_pass_action>() - 120usize];
    ["Alignment of sg_pass_action"][::std::mem::align_of::<sg_pass_action>() - 4usize];
    ["Offset of field: sg_pass_action::colors"]
        [::std::mem::offset_of!(sg_pass_action, colors) - 0usize];
    ["Offset of field: sg_pass_action::depth"]
        [::std::mem::offset_of!(sg_pass_action, depth) - 96usize];
    ["Offset of field: sg_pass_action::stencil"]
        [::std::mem::offset_of!(sg_pass_action, stencil) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_swapchain {
    pub current_drawable: *const ::std::os::raw::c_void,
    pub depth_stencil_texture: *const ::std::os::raw::c_void,
    pub msaa_color_texture: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_swapchain"][::std::mem::size_of::<sg_metal_swapchain>() - 24usize];
    ["Alignment of sg_metal_swapchain"][::std::mem::align_of::<sg_metal_swapchain>() - 8usize];
    ["Offset of field: sg_metal_swapchain::current_drawable"]
        [::std::mem::offset_of!(sg_metal_swapchain, current_drawable) - 0usize];
    ["Offset of field: sg_metal_swapchain::depth_stencil_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, depth_stencil_texture) - 8usize];
    ["Offset of field: sg_metal_swapchain::msaa_color_texture"]
        [::std::mem::offset_of!(sg_metal_swapchain, msaa_color_texture) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_swapchain"][::std::mem::size_of::<sg_d3d11_swapchain>() - 24usize];
    ["Alignment of sg_d3d11_swapchain"][::std::mem::align_of::<sg_d3d11_swapchain>() - 8usize];
    ["Offset of field: sg_d3d11_swapchain::render_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, render_view) - 0usize];
    ["Offset of field: sg_d3d11_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, resolve_view) - 8usize];
    ["Offset of field: sg_d3d11_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_d3d11_swapchain, depth_stencil_view) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_swapchain {
    pub render_view: *const ::std::os::raw::c_void,
    pub resolve_view: *const ::std::os::raw::c_void,
    pub depth_stencil_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_swapchain"][::std::mem::size_of::<sg_wgpu_swapchain>() - 24usize];
    ["Alignment of sg_wgpu_swapchain"][::std::mem::align_of::<sg_wgpu_swapchain>() - 8usize];
    ["Offset of field: sg_wgpu_swapchain::render_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, render_view) - 0usize];
    ["Offset of field: sg_wgpu_swapchain::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, resolve_view) - 8usize];
    ["Offset of field: sg_wgpu_swapchain::depth_stencil_view"]
        [::std::mem::offset_of!(sg_wgpu_swapchain, depth_stencil_view) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_swapchain {
    pub framebuffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_swapchain"][::std::mem::size_of::<sg_gl_swapchain>() - 4usize];
    ["Alignment of sg_gl_swapchain"][::std::mem::align_of::<sg_gl_swapchain>() - 4usize];
    ["Offset of field: sg_gl_swapchain::framebuffer"]
        [::std::mem::offset_of!(sg_gl_swapchain, framebuffer) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_swapchain {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub metal: sg_metal_swapchain,
    pub d3d11: sg_d3d11_swapchain,
    pub wgpu: sg_wgpu_swapchain,
    pub gl: sg_gl_swapchain,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_swapchain"][::std::mem::size_of::<sg_swapchain>() - 104usize];
    ["Alignment of sg_swapchain"][::std::mem::align_of::<sg_swapchain>() - 8usize];
    ["Offset of field: sg_swapchain::width"][::std::mem::offset_of!(sg_swapchain, width) - 0usize];
    ["Offset of field: sg_swapchain::height"]
        [::std::mem::offset_of!(sg_swapchain, height) - 4usize];
    ["Offset of field: sg_swapchain::sample_count"]
        [::std::mem::offset_of!(sg_swapchain, sample_count) - 8usize];
    ["Offset of field: sg_swapchain::color_format"]
        [::std::mem::offset_of!(sg_swapchain, color_format) - 12usize];
    ["Offset of field: sg_swapchain::depth_format"]
        [::std::mem::offset_of!(sg_swapchain, depth_format) - 16usize];
    ["Offset of field: sg_swapchain::metal"][::std::mem::offset_of!(sg_swapchain, metal) - 24usize];
    ["Offset of field: sg_swapchain::d3d11"][::std::mem::offset_of!(sg_swapchain, d3d11) - 48usize];
    ["Offset of field: sg_swapchain::wgpu"][::std::mem::offset_of!(sg_swapchain, wgpu) - 72usize];
    ["Offset of field: sg_swapchain::gl"][::std::mem::offset_of!(sg_swapchain, gl) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pass {
    pub _start_canary: u32,
    pub action: sg_pass_action,
    pub attachments: sg_attachments,
    pub swapchain: sg_swapchain,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pass"][::std::mem::size_of::<sg_pass>() - 248usize];
    ["Alignment of sg_pass"][::std::mem::align_of::<sg_pass>() - 8usize];
    ["Offset of field: sg_pass::_start_canary"]
        [::std::mem::offset_of!(sg_pass, _start_canary) - 0usize];
    ["Offset of field: sg_pass::action"][::std::mem::offset_of!(sg_pass, action) - 4usize];
    ["Offset of field: sg_pass::attachments"]
        [::std::mem::offset_of!(sg_pass, attachments) - 124usize];
    ["Offset of field: sg_pass::swapchain"][::std::mem::offset_of!(sg_pass, swapchain) - 128usize];
    ["Offset of field: sg_pass::label"][::std::mem::offset_of!(sg_pass, label) - 232usize];
    ["Offset of field: sg_pass::_end_canary"]
        [::std::mem::offset_of!(sg_pass, _end_canary) - 240usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stage_bindings {
    pub images: [sg_image; 12usize],
    pub samplers: [sg_sampler; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stage_bindings"][::std::mem::size_of::<sg_stage_bindings>() - 80usize];
    ["Alignment of sg_stage_bindings"][::std::mem::align_of::<sg_stage_bindings>() - 4usize];
    ["Offset of field: sg_stage_bindings::images"]
        [::std::mem::offset_of!(sg_stage_bindings, images) - 0usize];
    ["Offset of field: sg_stage_bindings::samplers"]
        [::std::mem::offset_of!(sg_stage_bindings, samplers) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_bindings {
    pub _start_canary: u32,
    pub vertex_buffers: [sg_buffer; 8usize],
    pub vertex_buffer_offsets: [::std::os::raw::c_int; 8usize],
    pub index_buffer: sg_buffer,
    pub index_buffer_offset: ::std::os::raw::c_int,
    pub vs: sg_stage_bindings,
    pub fs: sg_stage_bindings,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_bindings"][::std::mem::size_of::<sg_bindings>() - 240usize];
    ["Alignment of sg_bindings"][::std::mem::align_of::<sg_bindings>() - 4usize];
    ["Offset of field: sg_bindings::_start_canary"]
        [::std::mem::offset_of!(sg_bindings, _start_canary) - 0usize];
    ["Offset of field: sg_bindings::vertex_buffers"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffers) - 4usize];
    ["Offset of field: sg_bindings::vertex_buffer_offsets"]
        [::std::mem::offset_of!(sg_bindings, vertex_buffer_offsets) - 36usize];
    ["Offset of field: sg_bindings::index_buffer"]
        [::std::mem::offset_of!(sg_bindings, index_buffer) - 68usize];
    ["Offset of field: sg_bindings::index_buffer_offset"]
        [::std::mem::offset_of!(sg_bindings, index_buffer_offset) - 72usize];
    ["Offset of field: sg_bindings::vs"][::std::mem::offset_of!(sg_bindings, vs) - 76usize];
    ["Offset of field: sg_bindings::fs"][::std::mem::offset_of!(sg_bindings, fs) - 156usize];
    ["Offset of field: sg_bindings::_end_canary"]
        [::std::mem::offset_of!(sg_bindings, _end_canary) - 236usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_desc {
    pub _start_canary: u32,
    pub size: usize,
    pub type_: sg_buffer_type,
    pub usage: sg_usage,
    pub data: sg_range,
    pub label: *const ::std::os::raw::c_char,
    pub gl_buffers: [u32; 2usize],
    pub mtl_buffers: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_buffer: *const ::std::os::raw::c_void,
    pub wgpu_buffer: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_desc"][::std::mem::size_of::<sg_buffer_desc>() - 96usize];
    ["Alignment of sg_buffer_desc"][::std::mem::align_of::<sg_buffer_desc>() - 8usize];
    ["Offset of field: sg_buffer_desc::_start_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _start_canary) - 0usize];
    ["Offset of field: sg_buffer_desc::size"]
        [::std::mem::offset_of!(sg_buffer_desc, size) - 8usize];
    ["Offset of field: sg_buffer_desc::type_"]
        [::std::mem::offset_of!(sg_buffer_desc, type_) - 16usize];
    ["Offset of field: sg_buffer_desc::usage"]
        [::std::mem::offset_of!(sg_buffer_desc, usage) - 20usize];
    ["Offset of field: sg_buffer_desc::data"]
        [::std::mem::offset_of!(sg_buffer_desc, data) - 24usize];
    ["Offset of field: sg_buffer_desc::label"]
        [::std::mem::offset_of!(sg_buffer_desc, label) - 40usize];
    ["Offset of field: sg_buffer_desc::gl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, gl_buffers) - 48usize];
    ["Offset of field: sg_buffer_desc::mtl_buffers"]
        [::std::mem::offset_of!(sg_buffer_desc, mtl_buffers) - 56usize];
    ["Offset of field: sg_buffer_desc::d3d11_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, d3d11_buffer) - 72usize];
    ["Offset of field: sg_buffer_desc::wgpu_buffer"]
        [::std::mem::offset_of!(sg_buffer_desc, wgpu_buffer) - 80usize];
    ["Offset of field: sg_buffer_desc::_end_canary"]
        [::std::mem::offset_of!(sg_buffer_desc, _end_canary) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_data {
    pub subimage: [[sg_range; 16usize]; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_data"][::std::mem::size_of::<sg_image_data>() - 1536usize];
    ["Alignment of sg_image_data"][::std::mem::align_of::<sg_image_data>() - 8usize];
    ["Offset of field: sg_image_data::subimage"]
        [::std::mem::offset_of!(sg_image_data, subimage) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_desc {
    pub _start_canary: u32,
    pub type_: sg_image_type,
    pub render_target: bool,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub num_slices: ::std::os::raw::c_int,
    pub num_mipmaps: ::std::os::raw::c_int,
    pub usage: sg_usage,
    pub pixel_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub data: sg_image_data,
    pub label: *const ::std::os::raw::c_char,
    pub gl_textures: [u32; 2usize],
    pub gl_texture_target: u32,
    pub mtl_textures: [*const ::std::os::raw::c_void; 2usize],
    pub d3d11_texture: *const ::std::os::raw::c_void,
    pub d3d11_shader_resource_view: *const ::std::os::raw::c_void,
    pub wgpu_texture: *const ::std::os::raw::c_void,
    pub wgpu_texture_view: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_desc"][::std::mem::size_of::<sg_image_desc>() - 1656usize];
    ["Alignment of sg_image_desc"][::std::mem::align_of::<sg_image_desc>() - 8usize];
    ["Offset of field: sg_image_desc::_start_canary"]
        [::std::mem::offset_of!(sg_image_desc, _start_canary) - 0usize];
    ["Offset of field: sg_image_desc::type_"]
        [::std::mem::offset_of!(sg_image_desc, type_) - 4usize];
    ["Offset of field: sg_image_desc::render_target"]
        [::std::mem::offset_of!(sg_image_desc, render_target) - 8usize];
    ["Offset of field: sg_image_desc::width"]
        [::std::mem::offset_of!(sg_image_desc, width) - 12usize];
    ["Offset of field: sg_image_desc::height"]
        [::std::mem::offset_of!(sg_image_desc, height) - 16usize];
    ["Offset of field: sg_image_desc::num_slices"]
        [::std::mem::offset_of!(sg_image_desc, num_slices) - 20usize];
    ["Offset of field: sg_image_desc::num_mipmaps"]
        [::std::mem::offset_of!(sg_image_desc, num_mipmaps) - 24usize];
    ["Offset of field: sg_image_desc::usage"]
        [::std::mem::offset_of!(sg_image_desc, usage) - 28usize];
    ["Offset of field: sg_image_desc::pixel_format"]
        [::std::mem::offset_of!(sg_image_desc, pixel_format) - 32usize];
    ["Offset of field: sg_image_desc::sample_count"]
        [::std::mem::offset_of!(sg_image_desc, sample_count) - 36usize];
    ["Offset of field: sg_image_desc::data"][::std::mem::offset_of!(sg_image_desc, data) - 40usize];
    ["Offset of field: sg_image_desc::label"]
        [::std::mem::offset_of!(sg_image_desc, label) - 1576usize];
    ["Offset of field: sg_image_desc::gl_textures"]
        [::std::mem::offset_of!(sg_image_desc, gl_textures) - 1584usize];
    ["Offset of field: sg_image_desc::gl_texture_target"]
        [::std::mem::offset_of!(sg_image_desc, gl_texture_target) - 1592usize];
    ["Offset of field: sg_image_desc::mtl_textures"]
        [::std::mem::offset_of!(sg_image_desc, mtl_textures) - 1600usize];
    ["Offset of field: sg_image_desc::d3d11_texture"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_texture) - 1616usize];
    ["Offset of field: sg_image_desc::d3d11_shader_resource_view"]
        [::std::mem::offset_of!(sg_image_desc, d3d11_shader_resource_view) - 1624usize];
    ["Offset of field: sg_image_desc::wgpu_texture"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture) - 1632usize];
    ["Offset of field: sg_image_desc::wgpu_texture_view"]
        [::std::mem::offset_of!(sg_image_desc, wgpu_texture_view) - 1640usize];
    ["Offset of field: sg_image_desc::_end_canary"]
        [::std::mem::offset_of!(sg_image_desc, _end_canary) - 1648usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_desc {
    pub _start_canary: u32,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub mipmap_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub wrap_w: sg_wrap,
    pub min_lod: f32,
    pub max_lod: f32,
    pub border_color: sg_border_color,
    pub compare: sg_compare_func,
    pub max_anisotropy: u32,
    pub label: *const ::std::os::raw::c_char,
    pub gl_sampler: u32,
    pub mtl_sampler: *const ::std::os::raw::c_void,
    pub d3d11_sampler: *const ::std::os::raw::c_void,
    pub wgpu_sampler: *const ::std::os::raw::c_void,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_desc"][::std::mem::size_of::<sg_sampler_desc>() - 96usize];
    ["Alignment of sg_sampler_desc"][::std::mem::align_of::<sg_sampler_desc>() - 8usize];
    ["Offset of field: sg_sampler_desc::_start_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _start_canary) - 0usize];
    ["Offset of field: sg_sampler_desc::min_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, min_filter) - 4usize];
    ["Offset of field: sg_sampler_desc::mag_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mag_filter) - 8usize];
    ["Offset of field: sg_sampler_desc::mipmap_filter"]
        [::std::mem::offset_of!(sg_sampler_desc, mipmap_filter) - 12usize];
    ["Offset of field: sg_sampler_desc::wrap_u"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_u) - 16usize];
    ["Offset of field: sg_sampler_desc::wrap_v"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_v) - 20usize];
    ["Offset of field: sg_sampler_desc::wrap_w"]
        [::std::mem::offset_of!(sg_sampler_desc, wrap_w) - 24usize];
    ["Offset of field: sg_sampler_desc::min_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, min_lod) - 28usize];
    ["Offset of field: sg_sampler_desc::max_lod"]
        [::std::mem::offset_of!(sg_sampler_desc, max_lod) - 32usize];
    ["Offset of field: sg_sampler_desc::border_color"]
        [::std::mem::offset_of!(sg_sampler_desc, border_color) - 36usize];
    ["Offset of field: sg_sampler_desc::compare"]
        [::std::mem::offset_of!(sg_sampler_desc, compare) - 40usize];
    ["Offset of field: sg_sampler_desc::max_anisotropy"]
        [::std::mem::offset_of!(sg_sampler_desc, max_anisotropy) - 44usize];
    ["Offset of field: sg_sampler_desc::label"]
        [::std::mem::offset_of!(sg_sampler_desc, label) - 48usize];
    ["Offset of field: sg_sampler_desc::gl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, gl_sampler) - 56usize];
    ["Offset of field: sg_sampler_desc::mtl_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, mtl_sampler) - 64usize];
    ["Offset of field: sg_sampler_desc::d3d11_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, d3d11_sampler) - 72usize];
    ["Offset of field: sg_sampler_desc::wgpu_sampler"]
        [::std::mem::offset_of!(sg_sampler_desc, wgpu_sampler) - 80usize];
    ["Offset of field: sg_sampler_desc::_end_canary"]
        [::std::mem::offset_of!(sg_sampler_desc, _end_canary) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_attr_desc {
    pub name: *const ::std::os::raw::c_char,
    pub sem_name: *const ::std::os::raw::c_char,
    pub sem_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_attr_desc"][::std::mem::size_of::<sg_shader_attr_desc>() - 24usize];
    ["Alignment of sg_shader_attr_desc"][::std::mem::align_of::<sg_shader_attr_desc>() - 8usize];
    ["Offset of field: sg_shader_attr_desc::name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, name) - 0usize];
    ["Offset of field: sg_shader_attr_desc::sem_name"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_name) - 8usize];
    ["Offset of field: sg_shader_attr_desc::sem_index"]
        [::std::mem::offset_of!(sg_shader_attr_desc, sem_index) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_desc {
    pub name: *const ::std::os::raw::c_char,
    pub type_: sg_uniform_type,
    pub array_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_desc"][::std::mem::size_of::<sg_shader_uniform_desc>() - 16usize];
    ["Alignment of sg_shader_uniform_desc"]
        [::std::mem::align_of::<sg_shader_uniform_desc>() - 8usize];
    ["Offset of field: sg_shader_uniform_desc::name"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, name) - 0usize];
    ["Offset of field: sg_shader_uniform_desc::type_"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, type_) - 8usize];
    ["Offset of field: sg_shader_uniform_desc::array_count"]
        [::std::mem::offset_of!(sg_shader_uniform_desc, array_count) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_block_desc {
    pub size: usize,
    pub layout: sg_uniform_layout,
    pub uniforms: [sg_shader_uniform_desc; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_uniform_block_desc"]
        [::std::mem::size_of::<sg_shader_uniform_block_desc>() - 272usize];
    ["Alignment of sg_shader_uniform_block_desc"]
        [::std::mem::align_of::<sg_shader_uniform_block_desc>() - 8usize];
    ["Offset of field: sg_shader_uniform_block_desc::size"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, size) - 0usize];
    ["Offset of field: sg_shader_uniform_block_desc::layout"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, layout) - 8usize];
    ["Offset of field: sg_shader_uniform_block_desc::uniforms"]
        [::std::mem::offset_of!(sg_shader_uniform_block_desc, uniforms) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_desc {
    pub used: bool,
    pub multisampled: bool,
    pub image_type: sg_image_type,
    pub sample_type: sg_image_sample_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_desc"][::std::mem::size_of::<sg_shader_image_desc>() - 12usize];
    ["Alignment of sg_shader_image_desc"][::std::mem::align_of::<sg_shader_image_desc>() - 4usize];
    ["Offset of field: sg_shader_image_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_desc::multisampled"]
        [::std::mem::offset_of!(sg_shader_image_desc, multisampled) - 1usize];
    ["Offset of field: sg_shader_image_desc::image_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, image_type) - 4usize];
    ["Offset of field: sg_shader_image_desc::sample_type"]
        [::std::mem::offset_of!(sg_shader_image_desc, sample_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_sampler_desc {
    pub used: bool,
    pub sampler_type: sg_sampler_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_sampler_desc"][::std::mem::size_of::<sg_shader_sampler_desc>() - 8usize];
    ["Alignment of sg_shader_sampler_desc"]
        [::std::mem::align_of::<sg_shader_sampler_desc>() - 4usize];
    ["Offset of field: sg_shader_sampler_desc::used"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, used) - 0usize];
    ["Offset of field: sg_shader_sampler_desc::sampler_type"]
        [::std::mem::offset_of!(sg_shader_sampler_desc, sampler_type) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_sampler_pair_desc {
    pub used: bool,
    pub image_slot: ::std::os::raw::c_int,
    pub sampler_slot: ::std::os::raw::c_int,
    pub glsl_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_image_sampler_pair_desc"]
        [::std::mem::size_of::<sg_shader_image_sampler_pair_desc>() - 24usize];
    ["Alignment of sg_shader_image_sampler_pair_desc"]
        [::std::mem::align_of::<sg_shader_image_sampler_pair_desc>() - 8usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::used"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, used) - 0usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::image_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, image_slot) - 4usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::sampler_slot"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, sampler_slot) - 8usize];
    ["Offset of field: sg_shader_image_sampler_pair_desc::glsl_name"]
        [::std::mem::offset_of!(sg_shader_image_sampler_pair_desc, glsl_name) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_stage_desc {
    pub source: *const ::std::os::raw::c_char,
    pub bytecode: sg_range,
    pub entry: *const ::std::os::raw::c_char,
    pub d3d11_target: *const ::std::os::raw::c_char,
    pub uniform_blocks: [sg_shader_uniform_block_desc; 4usize],
    pub images: [sg_shader_image_desc; 12usize],
    pub samplers: [sg_shader_sampler_desc; 8usize],
    pub image_sampler_pairs: [sg_shader_image_sampler_pair_desc; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_stage_desc"][::std::mem::size_of::<sg_shader_stage_desc>() - 1624usize];
    ["Alignment of sg_shader_stage_desc"][::std::mem::align_of::<sg_shader_stage_desc>() - 8usize];
    ["Offset of field: sg_shader_stage_desc::source"]
        [::std::mem::offset_of!(sg_shader_stage_desc, source) - 0usize];
    ["Offset of field: sg_shader_stage_desc::bytecode"]
        [::std::mem::offset_of!(sg_shader_stage_desc, bytecode) - 8usize];
    ["Offset of field: sg_shader_stage_desc::entry"]
        [::std::mem::offset_of!(sg_shader_stage_desc, entry) - 24usize];
    ["Offset of field: sg_shader_stage_desc::d3d11_target"]
        [::std::mem::offset_of!(sg_shader_stage_desc, d3d11_target) - 32usize];
    ["Offset of field: sg_shader_stage_desc::uniform_blocks"]
        [::std::mem::offset_of!(sg_shader_stage_desc, uniform_blocks) - 40usize];
    ["Offset of field: sg_shader_stage_desc::images"]
        [::std::mem::offset_of!(sg_shader_stage_desc, images) - 1128usize];
    ["Offset of field: sg_shader_stage_desc::samplers"]
        [::std::mem::offset_of!(sg_shader_stage_desc, samplers) - 1272usize];
    ["Offset of field: sg_shader_stage_desc::image_sampler_pairs"]
        [::std::mem::offset_of!(sg_shader_stage_desc, image_sampler_pairs) - 1336usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_desc {
    pub _start_canary: u32,
    pub attrs: [sg_shader_attr_desc; 16usize],
    pub vs: sg_shader_stage_desc,
    pub fs: sg_shader_stage_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_desc"][::std::mem::size_of::<sg_shader_desc>() - 3656usize];
    ["Alignment of sg_shader_desc"][::std::mem::align_of::<sg_shader_desc>() - 8usize];
    ["Offset of field: sg_shader_desc::_start_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _start_canary) - 0usize];
    ["Offset of field: sg_shader_desc::attrs"]
        [::std::mem::offset_of!(sg_shader_desc, attrs) - 8usize];
    ["Offset of field: sg_shader_desc::vs"][::std::mem::offset_of!(sg_shader_desc, vs) - 392usize];
    ["Offset of field: sg_shader_desc::fs"][::std::mem::offset_of!(sg_shader_desc, fs) - 2016usize];
    ["Offset of field: sg_shader_desc::label"]
        [::std::mem::offset_of!(sg_shader_desc, label) - 3640usize];
    ["Offset of field: sg_shader_desc::_end_canary"]
        [::std::mem::offset_of!(sg_shader_desc, _end_canary) - 3648usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_buffer_layout_state {
    pub stride: ::std::os::raw::c_int,
    pub step_func: sg_vertex_step,
    pub step_rate: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_buffer_layout_state"]
        [::std::mem::size_of::<sg_vertex_buffer_layout_state>() - 12usize];
    ["Alignment of sg_vertex_buffer_layout_state"]
        [::std::mem::align_of::<sg_vertex_buffer_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::stride"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, stride) - 0usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_func"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_func) - 4usize];
    ["Offset of field: sg_vertex_buffer_layout_state::step_rate"]
        [::std::mem::offset_of!(sg_vertex_buffer_layout_state, step_rate) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_attr_state {
    pub buffer_index: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub format: sg_vertex_format,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_attr_state"][::std::mem::size_of::<sg_vertex_attr_state>() - 12usize];
    ["Alignment of sg_vertex_attr_state"][::std::mem::align_of::<sg_vertex_attr_state>() - 4usize];
    ["Offset of field: sg_vertex_attr_state::buffer_index"]
        [::std::mem::offset_of!(sg_vertex_attr_state, buffer_index) - 0usize];
    ["Offset of field: sg_vertex_attr_state::offset"]
        [::std::mem::offset_of!(sg_vertex_attr_state, offset) - 4usize];
    ["Offset of field: sg_vertex_attr_state::format"]
        [::std::mem::offset_of!(sg_vertex_attr_state, format) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_layout_state {
    pub buffers: [sg_vertex_buffer_layout_state; 8usize],
    pub attrs: [sg_vertex_attr_state; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_vertex_layout_state"][::std::mem::size_of::<sg_vertex_layout_state>() - 288usize];
    ["Alignment of sg_vertex_layout_state"]
        [::std::mem::align_of::<sg_vertex_layout_state>() - 4usize];
    ["Offset of field: sg_vertex_layout_state::buffers"]
        [::std::mem::offset_of!(sg_vertex_layout_state, buffers) - 0usize];
    ["Offset of field: sg_vertex_layout_state::attrs"]
        [::std::mem::offset_of!(sg_vertex_layout_state, attrs) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_face_state {
    pub compare: sg_compare_func,
    pub fail_op: sg_stencil_op,
    pub depth_fail_op: sg_stencil_op,
    pub pass_op: sg_stencil_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_face_state"][::std::mem::size_of::<sg_stencil_face_state>() - 16usize];
    ["Alignment of sg_stencil_face_state"]
        [::std::mem::align_of::<sg_stencil_face_state>() - 4usize];
    ["Offset of field: sg_stencil_face_state::compare"]
        [::std::mem::offset_of!(sg_stencil_face_state, compare) - 0usize];
    ["Offset of field: sg_stencil_face_state::fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, fail_op) - 4usize];
    ["Offset of field: sg_stencil_face_state::depth_fail_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, depth_fail_op) - 8usize];
    ["Offset of field: sg_stencil_face_state::pass_op"]
        [::std::mem::offset_of!(sg_stencil_face_state, pass_op) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_state {
    pub enabled: bool,
    pub front: sg_stencil_face_state,
    pub back: sg_stencil_face_state,
    pub read_mask: u8,
    pub write_mask: u8,
    pub ref_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_stencil_state"][::std::mem::size_of::<sg_stencil_state>() - 40usize];
    ["Alignment of sg_stencil_state"][::std::mem::align_of::<sg_stencil_state>() - 4usize];
    ["Offset of field: sg_stencil_state::enabled"]
        [::std::mem::offset_of!(sg_stencil_state, enabled) - 0usize];
    ["Offset of field: sg_stencil_state::front"]
        [::std::mem::offset_of!(sg_stencil_state, front) - 4usize];
    ["Offset of field: sg_stencil_state::back"]
        [::std::mem::offset_of!(sg_stencil_state, back) - 20usize];
    ["Offset of field: sg_stencil_state::read_mask"]
        [::std::mem::offset_of!(sg_stencil_state, read_mask) - 36usize];
    ["Offset of field: sg_stencil_state::write_mask"]
        [::std::mem::offset_of!(sg_stencil_state, write_mask) - 37usize];
    ["Offset of field: sg_stencil_state::ref_"]
        [::std::mem::offset_of!(sg_stencil_state, ref_) - 38usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_state {
    pub pixel_format: sg_pixel_format,
    pub compare: sg_compare_func,
    pub write_enabled: bool,
    pub bias: f32,
    pub bias_slope_scale: f32,
    pub bias_clamp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_depth_state"][::std::mem::size_of::<sg_depth_state>() - 24usize];
    ["Alignment of sg_depth_state"][::std::mem::align_of::<sg_depth_state>() - 4usize];
    ["Offset of field: sg_depth_state::pixel_format"]
        [::std::mem::offset_of!(sg_depth_state, pixel_format) - 0usize];
    ["Offset of field: sg_depth_state::compare"]
        [::std::mem::offset_of!(sg_depth_state, compare) - 4usize];
    ["Offset of field: sg_depth_state::write_enabled"]
        [::std::mem::offset_of!(sg_depth_state, write_enabled) - 8usize];
    ["Offset of field: sg_depth_state::bias"]
        [::std::mem::offset_of!(sg_depth_state, bias) - 12usize];
    ["Offset of field: sg_depth_state::bias_slope_scale"]
        [::std::mem::offset_of!(sg_depth_state, bias_slope_scale) - 16usize];
    ["Offset of field: sg_depth_state::bias_clamp"]
        [::std::mem::offset_of!(sg_depth_state, bias_clamp) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_blend_state {
    pub enabled: bool,
    pub src_factor_rgb: sg_blend_factor,
    pub dst_factor_rgb: sg_blend_factor,
    pub op_rgb: sg_blend_op,
    pub src_factor_alpha: sg_blend_factor,
    pub dst_factor_alpha: sg_blend_factor,
    pub op_alpha: sg_blend_op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_blend_state"][::std::mem::size_of::<sg_blend_state>() - 28usize];
    ["Alignment of sg_blend_state"][::std::mem::align_of::<sg_blend_state>() - 4usize];
    ["Offset of field: sg_blend_state::enabled"]
        [::std::mem::offset_of!(sg_blend_state, enabled) - 0usize];
    ["Offset of field: sg_blend_state::src_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_rgb) - 4usize];
    ["Offset of field: sg_blend_state::dst_factor_rgb"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_rgb) - 8usize];
    ["Offset of field: sg_blend_state::op_rgb"]
        [::std::mem::offset_of!(sg_blend_state, op_rgb) - 12usize];
    ["Offset of field: sg_blend_state::src_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, src_factor_alpha) - 16usize];
    ["Offset of field: sg_blend_state::dst_factor_alpha"]
        [::std::mem::offset_of!(sg_blend_state, dst_factor_alpha) - 20usize];
    ["Offset of field: sg_blend_state::op_alpha"]
        [::std::mem::offset_of!(sg_blend_state, op_alpha) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_target_state {
    pub pixel_format: sg_pixel_format,
    pub write_mask: sg_color_mask,
    pub blend: sg_blend_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_color_target_state"][::std::mem::size_of::<sg_color_target_state>() - 36usize];
    ["Alignment of sg_color_target_state"]
        [::std::mem::align_of::<sg_color_target_state>() - 4usize];
    ["Offset of field: sg_color_target_state::pixel_format"]
        [::std::mem::offset_of!(sg_color_target_state, pixel_format) - 0usize];
    ["Offset of field: sg_color_target_state::write_mask"]
        [::std::mem::offset_of!(sg_color_target_state, write_mask) - 4usize];
    ["Offset of field: sg_color_target_state::blend"]
        [::std::mem::offset_of!(sg_color_target_state, blend) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_desc {
    pub _start_canary: u32,
    pub shader: sg_shader,
    pub layout: sg_vertex_layout_state,
    pub depth: sg_depth_state,
    pub stencil: sg_stencil_state,
    pub color_count: ::std::os::raw::c_int,
    pub colors: [sg_color_target_state; 4usize],
    pub primitive_type: sg_primitive_type,
    pub index_type: sg_index_type,
    pub cull_mode: sg_cull_mode,
    pub face_winding: sg_face_winding,
    pub sample_count: ::std::os::raw::c_int,
    pub blend_color: sg_color,
    pub alpha_to_coverage_enabled: bool,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_desc"][::std::mem::size_of::<sg_pipeline_desc>() - 568usize];
    ["Alignment of sg_pipeline_desc"][::std::mem::align_of::<sg_pipeline_desc>() - 8usize];
    ["Offset of field: sg_pipeline_desc::_start_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _start_canary) - 0usize];
    ["Offset of field: sg_pipeline_desc::shader"]
        [::std::mem::offset_of!(sg_pipeline_desc, shader) - 4usize];
    ["Offset of field: sg_pipeline_desc::layout"]
        [::std::mem::offset_of!(sg_pipeline_desc, layout) - 8usize];
    ["Offset of field: sg_pipeline_desc::depth"]
        [::std::mem::offset_of!(sg_pipeline_desc, depth) - 296usize];
    ["Offset of field: sg_pipeline_desc::stencil"]
        [::std::mem::offset_of!(sg_pipeline_desc, stencil) - 320usize];
    ["Offset of field: sg_pipeline_desc::color_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, color_count) - 360usize];
    ["Offset of field: sg_pipeline_desc::colors"]
        [::std::mem::offset_of!(sg_pipeline_desc, colors) - 364usize];
    ["Offset of field: sg_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, primitive_type) - 508usize];
    ["Offset of field: sg_pipeline_desc::index_type"]
        [::std::mem::offset_of!(sg_pipeline_desc, index_type) - 512usize];
    ["Offset of field: sg_pipeline_desc::cull_mode"]
        [::std::mem::offset_of!(sg_pipeline_desc, cull_mode) - 516usize];
    ["Offset of field: sg_pipeline_desc::face_winding"]
        [::std::mem::offset_of!(sg_pipeline_desc, face_winding) - 520usize];
    ["Offset of field: sg_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sg_pipeline_desc, sample_count) - 524usize];
    ["Offset of field: sg_pipeline_desc::blend_color"]
        [::std::mem::offset_of!(sg_pipeline_desc, blend_color) - 528usize];
    ["Offset of field: sg_pipeline_desc::alpha_to_coverage_enabled"]
        [::std::mem::offset_of!(sg_pipeline_desc, alpha_to_coverage_enabled) - 544usize];
    ["Offset of field: sg_pipeline_desc::label"]
        [::std::mem::offset_of!(sg_pipeline_desc, label) - 552usize];
    ["Offset of field: sg_pipeline_desc::_end_canary"]
        [::std::mem::offset_of!(sg_pipeline_desc, _end_canary) - 560usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachment_desc {
    pub image: sg_image,
    pub mip_level: ::std::os::raw::c_int,
    pub slice: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachment_desc"][::std::mem::size_of::<sg_attachment_desc>() - 12usize];
    ["Alignment of sg_attachment_desc"][::std::mem::align_of::<sg_attachment_desc>() - 4usize];
    ["Offset of field: sg_attachment_desc::image"]
        [::std::mem::offset_of!(sg_attachment_desc, image) - 0usize];
    ["Offset of field: sg_attachment_desc::mip_level"]
        [::std::mem::offset_of!(sg_attachment_desc, mip_level) - 4usize];
    ["Offset of field: sg_attachment_desc::slice"]
        [::std::mem::offset_of!(sg_attachment_desc, slice) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_desc {
    pub _start_canary: u32,
    pub colors: [sg_attachment_desc; 4usize],
    pub resolves: [sg_attachment_desc; 4usize],
    pub depth_stencil: sg_attachment_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_desc"][::std::mem::size_of::<sg_attachments_desc>() - 128usize];
    ["Alignment of sg_attachments_desc"][::std::mem::align_of::<sg_attachments_desc>() - 8usize];
    ["Offset of field: sg_attachments_desc::_start_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _start_canary) - 0usize];
    ["Offset of field: sg_attachments_desc::colors"]
        [::std::mem::offset_of!(sg_attachments_desc, colors) - 4usize];
    ["Offset of field: sg_attachments_desc::resolves"]
        [::std::mem::offset_of!(sg_attachments_desc, resolves) - 52usize];
    ["Offset of field: sg_attachments_desc::depth_stencil"]
        [::std::mem::offset_of!(sg_attachments_desc, depth_stencil) - 100usize];
    ["Offset of field: sg_attachments_desc::label"]
        [::std::mem::offset_of!(sg_attachments_desc, label) - 112usize];
    ["Offset of field: sg_attachments_desc::_end_canary"]
        [::std::mem::offset_of!(sg_attachments_desc, _end_canary) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_trace_hooks {
    pub user_data: *mut ::std::os::raw::c_void,
    pub reset_state_cache:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub make_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_buffer_desc,
            result: sg_buffer,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_image: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_image_desc,
            result: sg_image,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_sampler_desc,
            result: sg_sampler,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_shader: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_shader_desc,
            result: sg_shader,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pipeline_desc,
            result: sg_pipeline,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub make_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_attachments_desc,
            result: sg_attachments,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub destroy_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_image: ::std::option::Option<
        unsafe extern "C" fn(img: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_shader: ::std::option::Option<
        unsafe extern "C" fn(shd: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub destroy_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub update_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub update_image: ::std::option::Option<
        unsafe extern "C" fn(
            img: sg_image,
            data: *const sg_image_data,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub append_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            result: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub begin_pass: ::std::option::Option<
        unsafe extern "C" fn(pass: *const sg_pass, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_viewport: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_scissor_rect: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub apply_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_bindings: ::std::option::Option<
        unsafe extern "C" fn(bindings: *const sg_bindings, user_data: *mut ::std::os::raw::c_void),
    >,
    pub apply_uniforms: ::std::option::Option<
        unsafe extern "C" fn(
            stage: sg_shader_stage,
            ub_index: ::std::os::raw::c_int,
            data: *const sg_range,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub draw: ::std::option::Option<
        unsafe extern "C" fn(
            base_element: ::std::os::raw::c_int,
            num_elements: ::std::os::raw::c_int,
            num_instances: ::std::os::raw::c_int,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub end_pass:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub commit: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub alloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(result: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_image: ::std::option::Option<
        unsafe extern "C" fn(result: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(result: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_shader: ::std::option::Option<
        unsafe extern "C" fn(result: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(result: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub alloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(result: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub dealloc_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub init_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buf_id: sg_buffer,
            desc: *const sg_buffer_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_image: ::std::option::Option<
        unsafe extern "C" fn(
            img_id: sg_image,
            desc: *const sg_image_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_sampler: ::std::option::Option<
        unsafe extern "C" fn(
            smp_id: sg_sampler,
            desc: *const sg_sampler_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_shader: ::std::option::Option<
        unsafe extern "C" fn(
            shd_id: sg_shader,
            desc: *const sg_shader_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_pipeline: ::std::option::Option<
        unsafe extern "C" fn(
            pip_id: sg_pipeline,
            desc: *const sg_pipeline_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub init_attachments: ::std::option::Option<
        unsafe extern "C" fn(
            atts_id: sg_attachments,
            desc: *const sg_attachments_desc,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub uninit_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub uninit_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_buffer: ::std::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_image: ::std::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_sampler: ::std::option::Option<
        unsafe extern "C" fn(smp_id: sg_sampler, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_shader: ::std::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_pipeline: ::std::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::std::os::raw::c_void),
    >,
    pub fail_attachments: ::std::option::Option<
        unsafe extern "C" fn(atts_id: sg_attachments, user_data: *mut ::std::os::raw::c_void),
    >,
    pub push_debug_group: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub pop_debug_group:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_trace_hooks"][::std::mem::size_of::<sg_trace_hooks>() - 464usize];
    ["Alignment of sg_trace_hooks"][::std::mem::align_of::<sg_trace_hooks>() - 8usize];
    ["Offset of field: sg_trace_hooks::user_data"]
        [::std::mem::offset_of!(sg_trace_hooks, user_data) - 0usize];
    ["Offset of field: sg_trace_hooks::reset_state_cache"]
        [::std::mem::offset_of!(sg_trace_hooks, reset_state_cache) - 8usize];
    ["Offset of field: sg_trace_hooks::make_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, make_buffer) - 16usize];
    ["Offset of field: sg_trace_hooks::make_image"]
        [::std::mem::offset_of!(sg_trace_hooks, make_image) - 24usize];
    ["Offset of field: sg_trace_hooks::make_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, make_sampler) - 32usize];
    ["Offset of field: sg_trace_hooks::make_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, make_shader) - 40usize];
    ["Offset of field: sg_trace_hooks::make_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, make_pipeline) - 48usize];
    ["Offset of field: sg_trace_hooks::make_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, make_attachments) - 56usize];
    ["Offset of field: sg_trace_hooks::destroy_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_buffer) - 64usize];
    ["Offset of field: sg_trace_hooks::destroy_image"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_image) - 72usize];
    ["Offset of field: sg_trace_hooks::destroy_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_sampler) - 80usize];
    ["Offset of field: sg_trace_hooks::destroy_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_shader) - 88usize];
    ["Offset of field: sg_trace_hooks::destroy_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_pipeline) - 96usize];
    ["Offset of field: sg_trace_hooks::destroy_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, destroy_attachments) - 104usize];
    ["Offset of field: sg_trace_hooks::update_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, update_buffer) - 112usize];
    ["Offset of field: sg_trace_hooks::update_image"]
        [::std::mem::offset_of!(sg_trace_hooks, update_image) - 120usize];
    ["Offset of field: sg_trace_hooks::append_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, append_buffer) - 128usize];
    ["Offset of field: sg_trace_hooks::begin_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, begin_pass) - 136usize];
    ["Offset of field: sg_trace_hooks::apply_viewport"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_viewport) - 144usize];
    ["Offset of field: sg_trace_hooks::apply_scissor_rect"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_scissor_rect) - 152usize];
    ["Offset of field: sg_trace_hooks::apply_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_pipeline) - 160usize];
    ["Offset of field: sg_trace_hooks::apply_bindings"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_bindings) - 168usize];
    ["Offset of field: sg_trace_hooks::apply_uniforms"]
        [::std::mem::offset_of!(sg_trace_hooks, apply_uniforms) - 176usize];
    ["Offset of field: sg_trace_hooks::draw"]
        [::std::mem::offset_of!(sg_trace_hooks, draw) - 184usize];
    ["Offset of field: sg_trace_hooks::end_pass"]
        [::std::mem::offset_of!(sg_trace_hooks, end_pass) - 192usize];
    ["Offset of field: sg_trace_hooks::commit"]
        [::std::mem::offset_of!(sg_trace_hooks, commit) - 200usize];
    ["Offset of field: sg_trace_hooks::alloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_buffer) - 208usize];
    ["Offset of field: sg_trace_hooks::alloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_image) - 216usize];
    ["Offset of field: sg_trace_hooks::alloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_sampler) - 224usize];
    ["Offset of field: sg_trace_hooks::alloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_shader) - 232usize];
    ["Offset of field: sg_trace_hooks::alloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_pipeline) - 240usize];
    ["Offset of field: sg_trace_hooks::alloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, alloc_attachments) - 248usize];
    ["Offset of field: sg_trace_hooks::dealloc_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_buffer) - 256usize];
    ["Offset of field: sg_trace_hooks::dealloc_image"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_image) - 264usize];
    ["Offset of field: sg_trace_hooks::dealloc_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_sampler) - 272usize];
    ["Offset of field: sg_trace_hooks::dealloc_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_shader) - 280usize];
    ["Offset of field: sg_trace_hooks::dealloc_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_pipeline) - 288usize];
    ["Offset of field: sg_trace_hooks::dealloc_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, dealloc_attachments) - 296usize];
    ["Offset of field: sg_trace_hooks::init_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, init_buffer) - 304usize];
    ["Offset of field: sg_trace_hooks::init_image"]
        [::std::mem::offset_of!(sg_trace_hooks, init_image) - 312usize];
    ["Offset of field: sg_trace_hooks::init_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, init_sampler) - 320usize];
    ["Offset of field: sg_trace_hooks::init_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, init_shader) - 328usize];
    ["Offset of field: sg_trace_hooks::init_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, init_pipeline) - 336usize];
    ["Offset of field: sg_trace_hooks::init_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, init_attachments) - 344usize];
    ["Offset of field: sg_trace_hooks::uninit_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_buffer) - 352usize];
    ["Offset of field: sg_trace_hooks::uninit_image"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_image) - 360usize];
    ["Offset of field: sg_trace_hooks::uninit_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_sampler) - 368usize];
    ["Offset of field: sg_trace_hooks::uninit_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_shader) - 376usize];
    ["Offset of field: sg_trace_hooks::uninit_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_pipeline) - 384usize];
    ["Offset of field: sg_trace_hooks::uninit_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, uninit_attachments) - 392usize];
    ["Offset of field: sg_trace_hooks::fail_buffer"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_buffer) - 400usize];
    ["Offset of field: sg_trace_hooks::fail_image"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_image) - 408usize];
    ["Offset of field: sg_trace_hooks::fail_sampler"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_sampler) - 416usize];
    ["Offset of field: sg_trace_hooks::fail_shader"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_shader) - 424usize];
    ["Offset of field: sg_trace_hooks::fail_pipeline"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_pipeline) - 432usize];
    ["Offset of field: sg_trace_hooks::fail_attachments"]
        [::std::mem::offset_of!(sg_trace_hooks, fail_attachments) - 440usize];
    ["Offset of field: sg_trace_hooks::push_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, push_debug_group) - 448usize];
    ["Offset of field: sg_trace_hooks::pop_debug_group"]
        [::std::mem::offset_of!(sg_trace_hooks, pop_debug_group) - 456usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_slot_info {
    pub state: sg_resource_state,
    pub res_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_slot_info"][::std::mem::size_of::<sg_slot_info>() - 8usize];
    ["Alignment of sg_slot_info"][::std::mem::align_of::<sg_slot_info>() - 4usize];
    ["Offset of field: sg_slot_info::state"][::std::mem::offset_of!(sg_slot_info, state) - 0usize];
    ["Offset of field: sg_slot_info::res_id"]
        [::std::mem::offset_of!(sg_slot_info, res_id) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_info {
    pub slot: sg_slot_info,
    pub update_frame_index: u32,
    pub append_frame_index: u32,
    pub append_pos: ::std::os::raw::c_int,
    pub append_overflow: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_buffer_info"][::std::mem::size_of::<sg_buffer_info>() - 32usize];
    ["Alignment of sg_buffer_info"][::std::mem::align_of::<sg_buffer_info>() - 4usize];
    ["Offset of field: sg_buffer_info::slot"]
        [::std::mem::offset_of!(sg_buffer_info, slot) - 0usize];
    ["Offset of field: sg_buffer_info::update_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, update_frame_index) - 8usize];
    ["Offset of field: sg_buffer_info::append_frame_index"]
        [::std::mem::offset_of!(sg_buffer_info, append_frame_index) - 12usize];
    ["Offset of field: sg_buffer_info::append_pos"]
        [::std::mem::offset_of!(sg_buffer_info, append_pos) - 16usize];
    ["Offset of field: sg_buffer_info::append_overflow"]
        [::std::mem::offset_of!(sg_buffer_info, append_overflow) - 20usize];
    ["Offset of field: sg_buffer_info::num_slots"]
        [::std::mem::offset_of!(sg_buffer_info, num_slots) - 24usize];
    ["Offset of field: sg_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_buffer_info, active_slot) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_info {
    pub slot: sg_slot_info,
    pub upd_frame_index: u32,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_image_info"][::std::mem::size_of::<sg_image_info>() - 20usize];
    ["Alignment of sg_image_info"][::std::mem::align_of::<sg_image_info>() - 4usize];
    ["Offset of field: sg_image_info::slot"][::std::mem::offset_of!(sg_image_info, slot) - 0usize];
    ["Offset of field: sg_image_info::upd_frame_index"]
        [::std::mem::offset_of!(sg_image_info, upd_frame_index) - 8usize];
    ["Offset of field: sg_image_info::num_slots"]
        [::std::mem::offset_of!(sg_image_info, num_slots) - 12usize];
    ["Offset of field: sg_image_info::active_slot"]
        [::std::mem::offset_of!(sg_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_sampler_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_sampler_info"][::std::mem::size_of::<sg_sampler_info>() - 8usize];
    ["Alignment of sg_sampler_info"][::std::mem::align_of::<sg_sampler_info>() - 4usize];
    ["Offset of field: sg_sampler_info::slot"]
        [::std::mem::offset_of!(sg_sampler_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_shader_info"][::std::mem::size_of::<sg_shader_info>() - 8usize];
    ["Alignment of sg_shader_info"][::std::mem::align_of::<sg_shader_info>() - 4usize];
    ["Offset of field: sg_shader_info::slot"]
        [::std::mem::offset_of!(sg_shader_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_pipeline_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_pipeline_info"][::std::mem::size_of::<sg_pipeline_info>() - 8usize];
    ["Alignment of sg_pipeline_info"][::std::mem::align_of::<sg_pipeline_info>() - 4usize];
    ["Offset of field: sg_pipeline_info::slot"]
        [::std::mem::offset_of!(sg_pipeline_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_attachments_info {
    pub slot: sg_slot_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_attachments_info"][::std::mem::size_of::<sg_attachments_info>() - 8usize];
    ["Alignment of sg_attachments_info"][::std::mem::align_of::<sg_attachments_info>() - 4usize];
    ["Offset of field: sg_attachments_info::slot"]
        [::std::mem::offset_of!(sg_attachments_info, slot) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_gl {
    pub num_bind_buffer: u32,
    pub num_active_texture: u32,
    pub num_bind_texture: u32,
    pub num_bind_sampler: u32,
    pub num_use_program: u32,
    pub num_render_state: u32,
    pub num_vertex_attrib_pointer: u32,
    pub num_vertex_attrib_divisor: u32,
    pub num_enable_vertex_attrib_array: u32,
    pub num_disable_vertex_attrib_array: u32,
    pub num_uniform: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_gl"][::std::mem::size_of::<sg_frame_stats_gl>() - 44usize];
    ["Alignment of sg_frame_stats_gl"][::std::mem::align_of::<sg_frame_stats_gl>() - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_gl::num_active_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_active_texture) - 4usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_texture"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_texture) - 8usize];
    ["Offset of field: sg_frame_stats_gl::num_bind_sampler"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_bind_sampler) - 12usize];
    ["Offset of field: sg_frame_stats_gl::num_use_program"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_use_program) - 16usize];
    ["Offset of field: sg_frame_stats_gl::num_render_state"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_render_state) - 20usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_pointer"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_pointer) - 24usize];
    ["Offset of field: sg_frame_stats_gl::num_vertex_attrib_divisor"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_vertex_attrib_divisor) - 28usize];
    ["Offset of field: sg_frame_stats_gl::num_enable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_enable_vertex_attrib_array) - 32usize];
    ["Offset of field: sg_frame_stats_gl::num_disable_vertex_attrib_array"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_disable_vertex_attrib_array) - 36usize];
    ["Offset of field: sg_frame_stats_gl::num_uniform"]
        [::std::mem::offset_of!(sg_frame_stats_gl, num_uniform) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pass {
    pub num_om_set_render_targets: u32,
    pub num_clear_render_target_view: u32,
    pub num_clear_depth_stencil_view: u32,
    pub num_resolve_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pass"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pass>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_pass"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pass>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_om_set_render_targets"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_om_set_render_targets) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_render_target_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_render_target_view) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_clear_depth_stencil_view"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_clear_depth_stencil_view) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pass::num_resolve_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pass, num_resolve_subresource) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_pipeline {
    pub num_rs_set_state: u32,
    pub num_om_set_depth_stencil_state: u32,
    pub num_om_set_blend_state: u32,
    pub num_ia_set_primitive_topology: u32,
    pub num_ia_set_input_layout: u32,
    pub num_vs_set_shader: u32,
    pub num_vs_set_constant_buffers: u32,
    pub num_ps_set_shader: u32,
    pub num_ps_set_constant_buffers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_pipeline>() - 36usize];
    ["Alignment of sg_frame_stats_d3d11_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_rs_set_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_rs_set_state) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_om_set_depth_stencil_state
    ) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_om_set_blend_state"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_om_set_blend_state) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_primitive_topology"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ia_set_primitive_topology
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ia_set_input_layout"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ia_set_input_layout) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_vs_set_shader) - 20usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_vs_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_vs_set_constant_buffers
    ) - 24usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_shader"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_pipeline, num_ps_set_shader) - 28usize];
    ["Offset of field: sg_frame_stats_d3d11_pipeline::num_ps_set_constant_buffers"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_pipeline,
        num_ps_set_constant_buffers
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_bindings {
    pub num_ia_set_vertex_buffers: u32,
    pub num_ia_set_index_buffer: u32,
    pub num_vs_set_shader_resources: u32,
    pub num_ps_set_shader_resources: u32,
    pub num_vs_set_samplers: u32,
    pub num_ps_set_samplers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_bindings"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_bindings>() - 24usize];
    ["Alignment of sg_frame_stats_d3d11_bindings"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_vertex_buffers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_vertex_buffers) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ia_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ia_set_index_buffer) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_vs_set_shader_resources
    ) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_shader_resources"][::std::mem::offset_of!(
        sg_frame_stats_d3d11_bindings,
        num_ps_set_shader_resources
    ) - 12usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_vs_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_vs_set_samplers) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11_bindings::num_ps_set_samplers"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_bindings, num_ps_set_samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_uniforms {
    pub num_update_subresource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Alignment of sg_frame_stats_d3d11_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_uniforms::num_update_subresource"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_uniforms, num_update_subresource) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11_draw {
    pub num_draw_indexed_instanced: u32,
    pub num_draw_indexed: u32,
    pub num_draw_instanced: u32,
    pub num_draw: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11_draw"]
        [::std::mem::size_of::<sg_frame_stats_d3d11_draw>() - 16usize];
    ["Alignment of sg_frame_stats_d3d11_draw"]
        [::std::mem::align_of::<sg_frame_stats_d3d11_draw>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed_instanced) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_indexed"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_indexed) - 4usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw_instanced"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw_instanced) - 8usize];
    ["Offset of field: sg_frame_stats_d3d11_draw::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11_draw, num_draw) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_d3d11 {
    pub pass: sg_frame_stats_d3d11_pass,
    pub pipeline: sg_frame_stats_d3d11_pipeline,
    pub bindings: sg_frame_stats_d3d11_bindings,
    pub uniforms: sg_frame_stats_d3d11_uniforms,
    pub draw: sg_frame_stats_d3d11_draw,
    pub num_map: u32,
    pub num_unmap: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_d3d11"][::std::mem::size_of::<sg_frame_stats_d3d11>() - 104usize];
    ["Alignment of sg_frame_stats_d3d11"][::std::mem::align_of::<sg_frame_stats_d3d11>() - 4usize];
    ["Offset of field: sg_frame_stats_d3d11::pass"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pass) - 0usize];
    ["Offset of field: sg_frame_stats_d3d11::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, pipeline) - 16usize];
    ["Offset of field: sg_frame_stats_d3d11::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, bindings) - 52usize];
    ["Offset of field: sg_frame_stats_d3d11::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, uniforms) - 76usize];
    ["Offset of field: sg_frame_stats_d3d11::draw"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, draw) - 80usize];
    ["Offset of field: sg_frame_stats_d3d11::num_map"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_map) - 96usize];
    ["Offset of field: sg_frame_stats_d3d11::num_unmap"]
        [::std::mem::offset_of!(sg_frame_stats_d3d11, num_unmap) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_idpool {
    pub num_added: u32,
    pub num_released: u32,
    pub num_garbage_collected: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_idpool"]
        [::std::mem::size_of::<sg_frame_stats_metal_idpool>() - 12usize];
    ["Alignment of sg_frame_stats_metal_idpool"]
        [::std::mem::align_of::<sg_frame_stats_metal_idpool>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_added"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_added) - 0usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_released"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_released) - 4usize];
    ["Offset of field: sg_frame_stats_metal_idpool::num_garbage_collected"]
        [::std::mem::offset_of!(sg_frame_stats_metal_idpool, num_garbage_collected) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_pipeline {
    pub num_set_blend_color: u32,
    pub num_set_cull_mode: u32,
    pub num_set_front_facing_winding: u32,
    pub num_set_stencil_reference_value: u32,
    pub num_set_depth_bias: u32,
    pub num_set_render_pipeline_state: u32,
    pub num_set_depth_stencil_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_pipeline"]
        [::std::mem::size_of::<sg_frame_stats_metal_pipeline>() - 28usize];
    ["Alignment of sg_frame_stats_metal_pipeline"]
        [::std::mem::align_of::<sg_frame_stats_metal_pipeline>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_blend_color"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_blend_color) - 0usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_cull_mode"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_cull_mode) - 4usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_front_facing_winding"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_front_facing_winding
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_stencil_reference_value"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_stencil_reference_value
    )
        - 12usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_bias"]
        [::std::mem::offset_of!(sg_frame_stats_metal_pipeline, num_set_depth_bias) - 16usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_render_pipeline_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_render_pipeline_state
    ) - 20usize];
    ["Offset of field: sg_frame_stats_metal_pipeline::num_set_depth_stencil_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_pipeline,
        num_set_depth_stencil_state
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_set_vertex_texture: u32,
    pub num_set_vertex_sampler_state: u32,
    pub num_set_fragment_texture: u32,
    pub num_set_fragment_sampler_state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_bindings"]
        [::std::mem::size_of::<sg_frame_stats_metal_bindings>() - 20usize];
    ["Alignment of sg_frame_stats_metal_bindings"]
        [::std::mem::align_of::<sg_frame_stats_metal_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_vertex_texture) - 4usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_vertex_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_vertex_sampler_state
    ) - 8usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_texture"]
        [::std::mem::offset_of!(sg_frame_stats_metal_bindings, num_set_fragment_texture) - 12usize];
    ["Offset of field: sg_frame_stats_metal_bindings::num_set_fragment_sampler_state"][::std::mem::offset_of!(
        sg_frame_stats_metal_bindings,
        num_set_fragment_sampler_state
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal_uniforms {
    pub num_set_vertex_buffer_offset: u32,
    pub num_set_fragment_buffer_offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_metal_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_metal_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_metal_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_vertex_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_vertex_buffer_offset
    ) - 0usize];
    ["Offset of field: sg_frame_stats_metal_uniforms::num_set_fragment_buffer_offset"][::std::mem::offset_of!(
        sg_frame_stats_metal_uniforms,
        num_set_fragment_buffer_offset
    ) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_metal {
    pub idpool: sg_frame_stats_metal_idpool,
    pub pipeline: sg_frame_stats_metal_pipeline,
    pub bindings: sg_frame_stats_metal_bindings,
    pub uniforms: sg_frame_stats_metal_uniforms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_metal"][::std::mem::size_of::<sg_frame_stats_metal>() - 68usize];
    ["Alignment of sg_frame_stats_metal"][::std::mem::align_of::<sg_frame_stats_metal>() - 4usize];
    ["Offset of field: sg_frame_stats_metal::idpool"]
        [::std::mem::offset_of!(sg_frame_stats_metal, idpool) - 0usize];
    ["Offset of field: sg_frame_stats_metal::pipeline"]
        [::std::mem::offset_of!(sg_frame_stats_metal, pipeline) - 12usize];
    ["Offset of field: sg_frame_stats_metal::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_metal, bindings) - 40usize];
    ["Offset of field: sg_frame_stats_metal::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_metal, uniforms) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_uniforms {
    pub num_set_bindgroup: u32,
    pub size_write_buffer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_uniforms>() - 8usize];
    ["Alignment of sg_frame_stats_wgpu_uniforms"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_uniforms>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, num_set_bindgroup) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_uniforms::size_write_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_uniforms, size_write_buffer) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu_bindings {
    pub num_set_vertex_buffer: u32,
    pub num_skip_redundant_vertex_buffer: u32,
    pub num_set_index_buffer: u32,
    pub num_skip_redundant_index_buffer: u32,
    pub num_create_bindgroup: u32,
    pub num_discard_bindgroup: u32,
    pub num_set_bindgroup: u32,
    pub num_skip_redundant_bindgroup: u32,
    pub num_bindgroup_cache_hits: u32,
    pub num_bindgroup_cache_misses: u32,
    pub num_bindgroup_cache_collisions: u32,
    pub num_bindgroup_cache_hash_vs_key_mismatch: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu_bindings"]
        [::std::mem::size_of::<sg_frame_stats_wgpu_bindings>() - 48usize];
    ["Alignment of sg_frame_stats_wgpu_bindings"]
        [::std::mem::align_of::<sg_frame_stats_wgpu_bindings>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_vertex_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_vertex_buffer) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_vertex_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_vertex_buffer
    ) - 4usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_index_buffer"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_index_buffer) - 8usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_index_buffer"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_index_buffer
    ) - 12usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_create_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_create_bindgroup) - 16usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_discard_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_discard_bindgroup) - 20usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_set_bindgroup"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_set_bindgroup) - 24usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_skip_redundant_bindgroup"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_skip_redundant_bindgroup
    ) - 28usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hits"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu_bindings, num_bindgroup_cache_hits) - 32usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_misses"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_misses
    ) - 36usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_collisions"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_collisions
    ) - 40usize];
    ["Offset of field: sg_frame_stats_wgpu_bindings::num_bindgroup_cache_hash_vs_key_mismatch"][::std::mem::offset_of!(
        sg_frame_stats_wgpu_bindings,
        num_bindgroup_cache_hash_vs_key_mismatch
    )
        - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats_wgpu {
    pub uniforms: sg_frame_stats_wgpu_uniforms,
    pub bindings: sg_frame_stats_wgpu_bindings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats_wgpu"][::std::mem::size_of::<sg_frame_stats_wgpu>() - 56usize];
    ["Alignment of sg_frame_stats_wgpu"][::std::mem::align_of::<sg_frame_stats_wgpu>() - 4usize];
    ["Offset of field: sg_frame_stats_wgpu::uniforms"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, uniforms) - 0usize];
    ["Offset of field: sg_frame_stats_wgpu::bindings"]
        [::std::mem::offset_of!(sg_frame_stats_wgpu, bindings) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_frame_stats {
    pub frame_index: u32,
    pub num_passes: u32,
    pub num_apply_viewport: u32,
    pub num_apply_scissor_rect: u32,
    pub num_apply_pipeline: u32,
    pub num_apply_bindings: u32,
    pub num_apply_uniforms: u32,
    pub num_draw: u32,
    pub num_update_buffer: u32,
    pub num_append_buffer: u32,
    pub num_update_image: u32,
    pub size_apply_uniforms: u32,
    pub size_update_buffer: u32,
    pub size_append_buffer: u32,
    pub size_update_image: u32,
    pub gl: sg_frame_stats_gl,
    pub d3d11: sg_frame_stats_d3d11,
    pub metal: sg_frame_stats_metal,
    pub wgpu: sg_frame_stats_wgpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_frame_stats"][::std::mem::size_of::<sg_frame_stats>() - 332usize];
    ["Alignment of sg_frame_stats"][::std::mem::align_of::<sg_frame_stats>() - 4usize];
    ["Offset of field: sg_frame_stats::frame_index"]
        [::std::mem::offset_of!(sg_frame_stats, frame_index) - 0usize];
    ["Offset of field: sg_frame_stats::num_passes"]
        [::std::mem::offset_of!(sg_frame_stats, num_passes) - 4usize];
    ["Offset of field: sg_frame_stats::num_apply_viewport"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_viewport) - 8usize];
    ["Offset of field: sg_frame_stats::num_apply_scissor_rect"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_scissor_rect) - 12usize];
    ["Offset of field: sg_frame_stats::num_apply_pipeline"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_pipeline) - 16usize];
    ["Offset of field: sg_frame_stats::num_apply_bindings"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_bindings) - 20usize];
    ["Offset of field: sg_frame_stats::num_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, num_apply_uniforms) - 24usize];
    ["Offset of field: sg_frame_stats::num_draw"]
        [::std::mem::offset_of!(sg_frame_stats, num_draw) - 28usize];
    ["Offset of field: sg_frame_stats::num_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_buffer) - 32usize];
    ["Offset of field: sg_frame_stats::num_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, num_append_buffer) - 36usize];
    ["Offset of field: sg_frame_stats::num_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, num_update_image) - 40usize];
    ["Offset of field: sg_frame_stats::size_apply_uniforms"]
        [::std::mem::offset_of!(sg_frame_stats, size_apply_uniforms) - 44usize];
    ["Offset of field: sg_frame_stats::size_update_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_buffer) - 48usize];
    ["Offset of field: sg_frame_stats::size_append_buffer"]
        [::std::mem::offset_of!(sg_frame_stats, size_append_buffer) - 52usize];
    ["Offset of field: sg_frame_stats::size_update_image"]
        [::std::mem::offset_of!(sg_frame_stats, size_update_image) - 56usize];
    ["Offset of field: sg_frame_stats::gl"][::std::mem::offset_of!(sg_frame_stats, gl) - 60usize];
    ["Offset of field: sg_frame_stats::d3d11"]
        [::std::mem::offset_of!(sg_frame_stats, d3d11) - 104usize];
    ["Offset of field: sg_frame_stats::metal"]
        [::std::mem::offset_of!(sg_frame_stats, metal) - 208usize];
    ["Offset of field: sg_frame_stats::wgpu"]
        [::std::mem::offset_of!(sg_frame_stats, wgpu) - 276usize];
};
pub const sg_log_item_SG_LOGITEM_OK: sg_log_item = 0;
pub const sg_log_item_SG_LOGITEM_MALLOC_FAILED: sg_log_item = 1;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 2;
pub const sg_log_item_SG_LOGITEM_GL_3D_TEXTURES_NOT_SUPPORTED: sg_log_item = 3;
pub const sg_log_item_SG_LOGITEM_GL_ARRAY_TEXTURES_NOT_SUPPORTED: sg_log_item = 4;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_COMPILATION_FAILED: sg_log_item = 5;
pub const sg_log_item_SG_LOGITEM_GL_SHADER_LINKING_FAILED: sg_log_item = 6;
pub const sg_log_item_SG_LOGITEM_GL_VERTEX_ATTRIBUTE_NOT_FOUND_IN_SHADER: sg_log_item = 7;
pub const sg_log_item_SG_LOGITEM_GL_TEXTURE_NAME_NOT_FOUND_IN_SHADER: sg_log_item = 8;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNDEFINED: sg_log_item = 9;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_ATTACHMENT: sg_log_item = 10;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MISSING_ATTACHMENT: sg_log_item =
    11;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNSUPPORTED: sg_log_item = 12;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_INCOMPLETE_MULTISAMPLE: sg_log_item = 13;
pub const sg_log_item_SG_LOGITEM_GL_FRAMEBUFFER_STATUS_UNKNOWN: sg_log_item = 14;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BUFFER_FAILED: sg_log_item = 15;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item =
    16;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_TEXTURE_FAILED: sg_log_item = 17;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 18;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_TEXTURE_FAILED: sg_log_item = 19;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_2D_SRV_FAILED: sg_log_item = 20;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_UNSUPPORTED_PIXEL_FORMAT: sg_log_item = 21;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_TEXTURE_FAILED: sg_log_item = 22;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_3D_SRV_FAILED: sg_log_item = 23;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_MSAA_TEXTURE_FAILED: sg_log_item = 24;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_SAMPLER_STATE_FAILED: sg_log_item = 25;
pub const sg_log_item_SG_LOGITEM_D3D11_LOAD_D3DCOMPILER_47_DLL_FAILED: sg_log_item = 26;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_FAILED: sg_log_item = 27;
pub const sg_log_item_SG_LOGITEM_D3D11_SHADER_COMPILATION_OUTPUT: sg_log_item = 28;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_CONSTANT_BUFFER_FAILED: sg_log_item = 29;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_INPUT_LAYOUT_FAILED: sg_log_item = 30;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RASTERIZER_STATE_FAILED: sg_log_item = 31;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DEPTH_STENCIL_STATE_FAILED: sg_log_item = 32;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_BLEND_STATE_FAILED: sg_log_item = 33;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_RTV_FAILED: sg_log_item = 34;
pub const sg_log_item_SG_LOGITEM_D3D11_CREATE_DSV_FAILED: sg_log_item = 35;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_BUFFER_FAILED: sg_log_item = 36;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_APPEND_BUFFER_FAILED: sg_log_item = 37;
pub const sg_log_item_SG_LOGITEM_D3D11_MAP_FOR_UPDATE_IMAGE_FAILED: sg_log_item = 38;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_BUFFER_FAILED: sg_log_item = 39;
pub const sg_log_item_SG_LOGITEM_METAL_TEXTURE_FORMAT_NOT_SUPPORTED: sg_log_item = 40;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_TEXTURE_FAILED: sg_log_item = 41;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_SAMPLER_FAILED: sg_log_item = 42;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_FAILED: sg_log_item = 43;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_CREATION_FAILED: sg_log_item = 44;
pub const sg_log_item_SG_LOGITEM_METAL_SHADER_COMPILATION_OUTPUT: sg_log_item = 45;
pub const sg_log_item_SG_LOGITEM_METAL_VERTEX_SHADER_ENTRY_NOT_FOUND: sg_log_item = 46;
pub const sg_log_item_SG_LOGITEM_METAL_FRAGMENT_SHADER_ENTRY_NOT_FOUND: sg_log_item = 47;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_FAILED: sg_log_item = 48;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_RPS_OUTPUT: sg_log_item = 49;
pub const sg_log_item_SG_LOGITEM_METAL_CREATE_DSS_FAILED: sg_log_item = 50;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPS_POOL_EXHAUSTED: sg_log_item = 51;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_GREATER_ONE: sg_log_item = 52;
pub const sg_log_item_SG_LOGITEM_WGPU_BINDGROUPSCACHE_SIZE_POW2: sg_log_item = 53;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATEBINDGROUP_FAILED: sg_log_item = 54;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_BUFFER_FAILED: sg_log_item = 55;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_FAILED: sg_log_item = 56;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 57;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SAMPLER_FAILED: sg_log_item = 58;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_SHADER_MODULE_FAILED: sg_log_item = 59;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_IMAGES: sg_log_item = 60;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_TOO_MANY_SAMPLERS: sg_log_item = 61;
pub const sg_log_item_SG_LOGITEM_WGPU_SHADER_CREATE_BINDGROUP_LAYOUT_FAILED: sg_log_item = 62;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_PIPELINE_LAYOUT_FAILED: sg_log_item = 63;
pub const sg_log_item_SG_LOGITEM_WGPU_CREATE_RENDER_PIPELINE_FAILED: sg_log_item = 64;
pub const sg_log_item_SG_LOGITEM_WGPU_ATTACHMENTS_CREATE_TEXTURE_VIEW_FAILED: sg_log_item = 65;
pub const sg_log_item_SG_LOGITEM_IDENTICAL_COMMIT_LISTENER: sg_log_item = 66;
pub const sg_log_item_SG_LOGITEM_COMMIT_LISTENER_ARRAY_FULL: sg_log_item = 67;
pub const sg_log_item_SG_LOGITEM_TRACE_HOOKS_NOT_ENABLED: sg_log_item = 68;
pub const sg_log_item_SG_LOGITEM_DEALLOC_BUFFER_INVALID_STATE: sg_log_item = 69;
pub const sg_log_item_SG_LOGITEM_DEALLOC_IMAGE_INVALID_STATE: sg_log_item = 70;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SAMPLER_INVALID_STATE: sg_log_item = 71;
pub const sg_log_item_SG_LOGITEM_DEALLOC_SHADER_INVALID_STATE: sg_log_item = 72;
pub const sg_log_item_SG_LOGITEM_DEALLOC_PIPELINE_INVALID_STATE: sg_log_item = 73;
pub const sg_log_item_SG_LOGITEM_DEALLOC_ATTACHMENTS_INVALID_STATE: sg_log_item = 74;
pub const sg_log_item_SG_LOGITEM_INIT_BUFFER_INVALID_STATE: sg_log_item = 75;
pub const sg_log_item_SG_LOGITEM_INIT_IMAGE_INVALID_STATE: sg_log_item = 76;
pub const sg_log_item_SG_LOGITEM_INIT_SAMPLER_INVALID_STATE: sg_log_item = 77;
pub const sg_log_item_SG_LOGITEM_INIT_SHADER_INVALID_STATE: sg_log_item = 78;
pub const sg_log_item_SG_LOGITEM_INIT_PIPELINE_INVALID_STATE: sg_log_item = 79;
pub const sg_log_item_SG_LOGITEM_INIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 80;
pub const sg_log_item_SG_LOGITEM_UNINIT_BUFFER_INVALID_STATE: sg_log_item = 81;
pub const sg_log_item_SG_LOGITEM_UNINIT_IMAGE_INVALID_STATE: sg_log_item = 82;
pub const sg_log_item_SG_LOGITEM_UNINIT_SAMPLER_INVALID_STATE: sg_log_item = 83;
pub const sg_log_item_SG_LOGITEM_UNINIT_SHADER_INVALID_STATE: sg_log_item = 84;
pub const sg_log_item_SG_LOGITEM_UNINIT_PIPELINE_INVALID_STATE: sg_log_item = 85;
pub const sg_log_item_SG_LOGITEM_UNINIT_ATTACHMENTS_INVALID_STATE: sg_log_item = 86;
pub const sg_log_item_SG_LOGITEM_FAIL_BUFFER_INVALID_STATE: sg_log_item = 87;
pub const sg_log_item_SG_LOGITEM_FAIL_IMAGE_INVALID_STATE: sg_log_item = 88;
pub const sg_log_item_SG_LOGITEM_FAIL_SAMPLER_INVALID_STATE: sg_log_item = 89;
pub const sg_log_item_SG_LOGITEM_FAIL_SHADER_INVALID_STATE: sg_log_item = 90;
pub const sg_log_item_SG_LOGITEM_FAIL_PIPELINE_INVALID_STATE: sg_log_item = 91;
pub const sg_log_item_SG_LOGITEM_FAIL_ATTACHMENTS_INVALID_STATE: sg_log_item = 92;
pub const sg_log_item_SG_LOGITEM_BUFFER_POOL_EXHAUSTED: sg_log_item = 93;
pub const sg_log_item_SG_LOGITEM_IMAGE_POOL_EXHAUSTED: sg_log_item = 94;
pub const sg_log_item_SG_LOGITEM_SAMPLER_POOL_EXHAUSTED: sg_log_item = 95;
pub const sg_log_item_SG_LOGITEM_SHADER_POOL_EXHAUSTED: sg_log_item = 96;
pub const sg_log_item_SG_LOGITEM_PIPELINE_POOL_EXHAUSTED: sg_log_item = 97;
pub const sg_log_item_SG_LOGITEM_PASS_POOL_EXHAUSTED: sg_log_item = 98;
pub const sg_log_item_SG_LOGITEM_BEGINPASS_ATTACHMENT_INVALID: sg_log_item = 99;
pub const sg_log_item_SG_LOGITEM_DRAW_WITHOUT_BINDINGS: sg_log_item = 100;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_CANARY: sg_log_item = 101;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_SIZE: sg_log_item = 102;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA: sg_log_item = 103;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_DATA_SIZE: sg_log_item = 104;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BUFFERDESC_NO_DATA: sg_log_item = 105;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_NODATA: sg_log_item = 106;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDATA_DATA_SIZE: sg_log_item = 107;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_CANARY: sg_log_item = 108;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_WIDTH: sg_log_item = 109;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_HEIGHT: sg_log_item = 110;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_PIXELFORMAT: sg_log_item = 111;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NONRT_PIXELFORMAT: sg_log_item = 112;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_BUT_NO_RT: sg_log_item = 113;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_NO_MSAA_RT_SUPPORT: sg_log_item = 114;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_NUM_MIPMAPS: sg_log_item = 115;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_MSAA_3D_IMAGE: sg_log_item = 116;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DEPTH_3D_IMAGE: sg_log_item = 117;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_IMMUTABLE: sg_log_item = 118;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_RT_NO_DATA: sg_log_item = 119;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_INJECTED_NO_DATA: sg_log_item = 120;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_DYNAMIC_NO_DATA: sg_log_item = 121;
pub const sg_log_item_SG_LOGITEM_VALIDATE_IMAGEDESC_COMPRESSED_IMMUTABLE: sg_log_item = 122;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_CANARY: sg_log_item = 123;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MINFILTER_NONE: sg_log_item = 124;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_MAGFILTER_NONE: sg_log_item = 125;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SAMPLERDESC_ANISTROPIC_REQUIRES_LINEAR_FILTERING:
    sg_log_item = 126;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_CANARY: sg_log_item = 127;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE: sg_log_item = 128;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_BYTECODE: sg_log_item = 129;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SOURCE_OR_BYTECODE: sg_log_item = 130;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_BYTECODE_SIZE: sg_log_item = 131;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UBS: sg_log_item = 132;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_UB_MEMBERS: sg_log_item = 133;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_UB_MEMBERS: sg_log_item = 134;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_MEMBER_NAME: sg_log_item = 135;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_SIZE_MISMATCH: sg_log_item = 136;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_ARRAY_COUNT: sg_log_item = 137;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_UB_STD140_ARRAY_TYPE: sg_log_item = 138;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGES: sg_log_item = 139;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_SAMPLERS: sg_log_item = 140;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_IMAGE_SLOT_OUT_OF_RANGE:
    sg_log_item = 141;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_SAMPLER_SLOT_OUT_OF_RANGE : sg_log_item = 142 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_NAME_REQUIRED_FOR_GL:
    sg_log_item = 143;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_NAME_BUT_NOT_USED:
    sg_log_item = 144;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_IMAGE_BUT_NOT_USED:
    sg_log_item = 145;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_SAMPLER_PAIR_HAS_SAMPLER_BUT_NOT_USED:
    sg_log_item = 146;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NONFILTERING_SAMPLER_REQUIRED: sg_log_item =
    147;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED: sg_log_item = 148;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_IMAGE_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS:
    sg_log_item = 149;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_SAMPLER_NOT_REFERENCED_BY_IMAGE_SAMPLER_PAIRS : sg_log_item = 150 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_NO_CONT_IMAGE_SAMPLER_PAIRS: sg_log_item = 151;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_SEMANTICS: sg_log_item = 152;
pub const sg_log_item_SG_LOGITEM_VALIDATE_SHADERDESC_ATTR_STRING_TOO_LONG: sg_log_item = 153;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_CANARY: sg_log_item = 154;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_SHADER: sg_log_item = 155;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_NO_ATTRS: sg_log_item = 156;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_LAYOUT_STRIDE4: sg_log_item = 157;
pub const sg_log_item_SG_LOGITEM_VALIDATE_PIPELINEDESC_ATTR_SEMANTICS: sg_log_item = 158;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_CANARY: sg_log_item = 159;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_ATTACHMENTS: sg_log_item = 160;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_NO_CONT_COLOR_ATTS: sg_log_item = 161;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE: sg_log_item = 162;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_MIPLEVEL: sg_log_item = 163;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_FACE: sg_log_item = 164;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_LAYER: sg_log_item = 165;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_SLICE: sg_log_item = 166;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_NO_RT: sg_log_item = 167;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_COLOR_INV_PIXELFORMAT: sg_log_item = 168;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_INV_PIXELFORMAT: sg_log_item = 169;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SIZES: sg_log_item = 170;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_IMAGE_SAMPLE_COUNTS: sg_log_item = 171;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_COLOR_IMAGE_MSAA: sg_log_item =
    172;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE: sg_log_item = 173;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SAMPLE_COUNT: sg_log_item = 174;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_MIPLEVEL: sg_log_item = 175;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_FACE: sg_log_item = 176;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_LAYER: sg_log_item = 177;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_SLICE: sg_log_item = 178;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_NO_RT: sg_log_item = 179;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_SIZES: sg_log_item = 180;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_RESOLVE_IMAGE_FORMAT: sg_log_item = 181;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE: sg_log_item = 182;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_MIPLEVEL: sg_log_item = 183;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_FACE: sg_log_item = 184;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_LAYER: sg_log_item = 185;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_SLICE: sg_log_item = 186;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_NO_RT: sg_log_item = 187;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SIZES: sg_log_item = 188;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ATTACHMENTSDESC_DEPTH_IMAGE_SAMPLE_COUNT: sg_log_item =
    189;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_CANARY: sg_log_item = 190;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_EXISTS: sg_log_item = 191;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_ATTACHMENTS_VALID: sg_log_item = 192;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_COLOR_ATTACHMENT_IMAGE: sg_log_item = 193;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_RESOLVE_ATTACHMENT_IMAGE: sg_log_item = 194;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_DEPTHSTENCIL_ATTACHMENT_IMAGE: sg_log_item =
    195;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH: sg_log_item = 196;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_WIDTH_NOTSET: sg_log_item =
    197;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT: sg_log_item = 198;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_HEIGHT_NOTSET: sg_log_item =
    199;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT: sg_log_item = 200;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_SAMPLECOUNT_NOTSET:
    sg_log_item = 201;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT: sg_log_item = 202;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_COLORFORMAT_NOTSET:
    sg_log_item = 203;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_EXPECT_DEPTHFORMAT_NOTSET:
    sg_log_item = 204;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE:
    sg_log_item = 205;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_CURRENTDRAWABLE_NOTSET : sg_log_item = 206 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE:
    sg_log_item = 207;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_DEPTHSTENCILTEXTURE_NOTSET : sg_log_item = 208 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE:
    sg_log_item = 209;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_METAL_EXPECT_MSAACOLORTEXTURE_NOTSET : sg_log_item = 210 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW: sg_log_item =
    211;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 212;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW:
    sg_log_item = 213;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 214;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 215;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_D3D11_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 216 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW: sg_log_item =
    217;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RENDERVIEW_NOTSET:
    sg_log_item = 218;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW: sg_log_item =
    219;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_RESOLVEVIEW_NOTSET:
    sg_log_item = 220;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW:
    sg_log_item = 221;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_WGPU_EXPECT_DEPTHSTENCILVIEW_NOTSET : sg_log_item = 222 ;
pub const sg_log_item_SG_LOGITEM_VALIDATE_BEGINPASS_SWAPCHAIN_GL_EXPECT_FRAMEBUFFER_NOTSET:
    sg_log_item = 223;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID_ID: sg_log_item = 224;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_EXISTS: sg_log_item = 225;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_PIPELINE_VALID: sg_log_item = 226;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_EXISTS: sg_log_item = 227;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SHADER_VALID: sg_log_item = 228;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_EXISTS: sg_log_item = 229;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_CURPASS_ATTACHMENTS_VALID: sg_log_item = 230;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_ATT_COUNT: sg_log_item = 231;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_COLOR_FORMAT: sg_log_item = 232;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_DEPTH_FORMAT: sg_log_item = 233;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APIP_SAMPLE_COUNT: sg_log_item = 234;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE: sg_log_item = 235;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_EXISTS: sg_log_item = 236;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_PIPELINE_VALID: sg_log_item = 237;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VBS: sg_log_item = 238;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_EXISTS: sg_log_item = 239;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_TYPE: sg_log_item = 240;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VB_OVERFLOW: sg_log_item = 241;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_NO_IB: sg_log_item = 242;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB: sg_log_item = 243;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_EXISTS: sg_log_item = 244;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_TYPE: sg_log_item = 245;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_IB_OVERFLOW: sg_log_item = 246;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_IMAGE_BINDING: sg_log_item = 247;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMG_EXISTS: sg_log_item = 248;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_TYPE_MISMATCH: sg_log_item = 249;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_IMAGE_MSAA: sg_log_item = 250;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 251;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_DEPTH_IMAGE: sg_log_item = 252;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 253;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_BINDING: sg_log_item = 254;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    255;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 256;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 257;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 258;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_VS_SMP_EXISTS: sg_log_item = 259;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_IMAGE_BINDING: sg_log_item = 260;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMG_EXISTS: sg_log_item = 261;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_TYPE_MISMATCH: sg_log_item = 262;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_IMAGE_MSAA: sg_log_item = 263;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_FILTERABLE_IMAGE: sg_log_item = 264;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_DEPTH_IMAGE: sg_log_item = 265;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_IMAGE_BINDING: sg_log_item = 266;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_BINDING: sg_log_item = 267;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item =
    268;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_SAMPLER_COMPARE_NEVER: sg_log_item = 269;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_EXPECTED_NONFILTERING_SAMPLER: sg_log_item = 270;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_UNEXPECTED_SAMPLER_BINDING: sg_log_item = 271;
pub const sg_log_item_SG_LOGITEM_VALIDATE_ABND_FS_SMP_EXISTS: sg_log_item = 272;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_PIPELINE: sg_log_item = 273;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_NO_UB_AT_SLOT: sg_log_item = 274;
pub const sg_log_item_SG_LOGITEM_VALIDATE_AUB_SIZE: sg_log_item = 275;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_USAGE: sg_log_item = 276;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_SIZE: sg_log_item = 277;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_ONCE: sg_log_item = 278;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDATEBUF_APPEND: sg_log_item = 279;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_USAGE: sg_log_item = 280;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_SIZE: sg_log_item = 281;
pub const sg_log_item_SG_LOGITEM_VALIDATE_APPENDBUF_UPDATE: sg_log_item = 282;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_USAGE: sg_log_item = 283;
pub const sg_log_item_SG_LOGITEM_VALIDATE_UPDIMG_ONCE: sg_log_item = 284;
pub const sg_log_item_SG_LOGITEM_VALIDATION_FAILED: sg_log_item = 285;
pub type sg_log_item = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment_defaults {
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment_defaults"][::std::mem::size_of::<sg_environment_defaults>() - 12usize];
    ["Alignment of sg_environment_defaults"]
        [::std::mem::align_of::<sg_environment_defaults>() - 4usize];
    ["Offset of field: sg_environment_defaults::color_format"]
        [::std::mem::offset_of!(sg_environment_defaults, color_format) - 0usize];
    ["Offset of field: sg_environment_defaults::depth_format"]
        [::std::mem::offset_of!(sg_environment_defaults, depth_format) - 4usize];
    ["Offset of field: sg_environment_defaults::sample_count"]
        [::std::mem::offset_of!(sg_environment_defaults, sample_count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_metal_environment"][::std::mem::size_of::<sg_metal_environment>() - 8usize];
    ["Alignment of sg_metal_environment"][::std::mem::align_of::<sg_metal_environment>() - 8usize];
    ["Offset of field: sg_metal_environment::device"]
        [::std::mem::offset_of!(sg_metal_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_environment {
    pub device: *const ::std::os::raw::c_void,
    pub device_context: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_environment"][::std::mem::size_of::<sg_d3d11_environment>() - 16usize];
    ["Alignment of sg_d3d11_environment"][::std::mem::align_of::<sg_d3d11_environment>() - 8usize];
    ["Offset of field: sg_d3d11_environment::device"]
        [::std::mem::offset_of!(sg_d3d11_environment, device) - 0usize];
    ["Offset of field: sg_d3d11_environment::device_context"]
        [::std::mem::offset_of!(sg_d3d11_environment, device_context) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_environment {
    pub device: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_environment"][::std::mem::size_of::<sg_wgpu_environment>() - 8usize];
    ["Alignment of sg_wgpu_environment"][::std::mem::align_of::<sg_wgpu_environment>() - 8usize];
    ["Offset of field: sg_wgpu_environment::device"]
        [::std::mem::offset_of!(sg_wgpu_environment, device) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_environment {
    pub defaults: sg_environment_defaults,
    pub metal: sg_metal_environment,
    pub d3d11: sg_d3d11_environment,
    pub wgpu: sg_wgpu_environment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_environment"][::std::mem::size_of::<sg_environment>() - 48usize];
    ["Alignment of sg_environment"][::std::mem::align_of::<sg_environment>() - 8usize];
    ["Offset of field: sg_environment::defaults"]
        [::std::mem::offset_of!(sg_environment, defaults) - 0usize];
    ["Offset of field: sg_environment::metal"]
        [::std::mem::offset_of!(sg_environment, metal) - 16usize];
    ["Offset of field: sg_environment::d3d11"]
        [::std::mem::offset_of!(sg_environment, d3d11) - 24usize];
    ["Offset of field: sg_environment::wgpu"]
        [::std::mem::offset_of!(sg_environment, wgpu) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_commit_listener {
    pub func: ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_commit_listener"][::std::mem::size_of::<sg_commit_listener>() - 16usize];
    ["Alignment of sg_commit_listener"][::std::mem::align_of::<sg_commit_listener>() - 8usize];
    ["Offset of field: sg_commit_listener::func"]
        [::std::mem::offset_of!(sg_commit_listener, func) - 0usize];
    ["Offset of field: sg_commit_listener::user_data"]
        [::std::mem::offset_of!(sg_commit_listener, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_allocator {
    pub alloc_fn: ::std::option::Option<
        unsafe extern "C" fn(
            size: usize,
            user_data: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_fn: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_void,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_allocator"][::std::mem::size_of::<sg_allocator>() - 24usize];
    ["Alignment of sg_allocator"][::std::mem::align_of::<sg_allocator>() - 8usize];
    ["Offset of field: sg_allocator::alloc_fn"]
        [::std::mem::offset_of!(sg_allocator, alloc_fn) - 0usize];
    ["Offset of field: sg_allocator::free_fn"]
        [::std::mem::offset_of!(sg_allocator, free_fn) - 8usize];
    ["Offset of field: sg_allocator::user_data"]
        [::std::mem::offset_of!(sg_allocator, user_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_logger {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            log_level: u32,
            log_item_id: u32,
            message_or_null: *const ::std::os::raw::c_char,
            line_nr: u32,
            filename_or_null: *const ::std::os::raw::c_char,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_logger"][::std::mem::size_of::<sg_logger>() - 16usize];
    ["Alignment of sg_logger"][::std::mem::align_of::<sg_logger>() - 8usize];
    ["Offset of field: sg_logger::func"][::std::mem::offset_of!(sg_logger, func) - 0usize];
    ["Offset of field: sg_logger::user_data"]
        [::std::mem::offset_of!(sg_logger, user_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_desc {
    pub _start_canary: u32,
    pub buffer_pool_size: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub sampler_pool_size: ::std::os::raw::c_int,
    pub shader_pool_size: ::std::os::raw::c_int,
    pub pipeline_pool_size: ::std::os::raw::c_int,
    pub attachments_pool_size: ::std::os::raw::c_int,
    pub uniform_buffer_size: ::std::os::raw::c_int,
    pub max_commit_listeners: ::std::os::raw::c_int,
    pub disable_validation: bool,
    pub mtl_force_managed_storage_mode: bool,
    pub mtl_use_command_buffer_with_retained_references: bool,
    pub wgpu_disable_bindgroups_cache: bool,
    pub wgpu_bindgroups_cache_size: ::std::os::raw::c_int,
    pub allocator: sg_allocator,
    pub logger: sg_logger,
    pub environment: sg_environment,
    pub _end_canary: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_desc"][::std::mem::size_of::<sg_desc>() - 144usize];
    ["Alignment of sg_desc"][::std::mem::align_of::<sg_desc>() - 8usize];
    ["Offset of field: sg_desc::_start_canary"]
        [::std::mem::offset_of!(sg_desc, _start_canary) - 0usize];
    ["Offset of field: sg_desc::buffer_pool_size"]
        [::std::mem::offset_of!(sg_desc, buffer_pool_size) - 4usize];
    ["Offset of field: sg_desc::image_pool_size"]
        [::std::mem::offset_of!(sg_desc, image_pool_size) - 8usize];
    ["Offset of field: sg_desc::sampler_pool_size"]
        [::std::mem::offset_of!(sg_desc, sampler_pool_size) - 12usize];
    ["Offset of field: sg_desc::shader_pool_size"]
        [::std::mem::offset_of!(sg_desc, shader_pool_size) - 16usize];
    ["Offset of field: sg_desc::pipeline_pool_size"]
        [::std::mem::offset_of!(sg_desc, pipeline_pool_size) - 20usize];
    ["Offset of field: sg_desc::attachments_pool_size"]
        [::std::mem::offset_of!(sg_desc, attachments_pool_size) - 24usize];
    ["Offset of field: sg_desc::uniform_buffer_size"]
        [::std::mem::offset_of!(sg_desc, uniform_buffer_size) - 28usize];
    ["Offset of field: sg_desc::max_commit_listeners"]
        [::std::mem::offset_of!(sg_desc, max_commit_listeners) - 32usize];
    ["Offset of field: sg_desc::disable_validation"]
        [::std::mem::offset_of!(sg_desc, disable_validation) - 36usize];
    ["Offset of field: sg_desc::mtl_force_managed_storage_mode"]
        [::std::mem::offset_of!(sg_desc, mtl_force_managed_storage_mode) - 37usize];
    ["Offset of field: sg_desc::mtl_use_command_buffer_with_retained_references"][::std::mem::offset_of!(
        sg_desc,
        mtl_use_command_buffer_with_retained_references
    ) - 38usize];
    ["Offset of field: sg_desc::wgpu_disable_bindgroups_cache"]
        [::std::mem::offset_of!(sg_desc, wgpu_disable_bindgroups_cache) - 39usize];
    ["Offset of field: sg_desc::wgpu_bindgroups_cache_size"]
        [::std::mem::offset_of!(sg_desc, wgpu_bindgroups_cache_size) - 40usize];
    ["Offset of field: sg_desc::allocator"][::std::mem::offset_of!(sg_desc, allocator) - 48usize];
    ["Offset of field: sg_desc::logger"][::std::mem::offset_of!(sg_desc, logger) - 72usize];
    ["Offset of field: sg_desc::environment"]
        [::std::mem::offset_of!(sg_desc, environment) - 88usize];
    ["Offset of field: sg_desc::_end_canary"]
        [::std::mem::offset_of!(sg_desc, _end_canary) - 136usize];
};
unsafe extern "C" {
    pub fn sg_setup(desc: *const sg_desc);
}
unsafe extern "C" {
    pub fn sg_shutdown();
}
unsafe extern "C" {
    pub fn sg_isvalid() -> bool;
}
unsafe extern "C" {
    pub fn sg_reset_state_cache();
}
unsafe extern "C" {
    pub fn sg_install_trace_hooks(trace_hooks: *const sg_trace_hooks) -> sg_trace_hooks;
}
unsafe extern "C" {
    pub fn sg_push_debug_group(name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sg_pop_debug_group();
}
unsafe extern "C" {
    pub fn sg_add_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_remove_commit_listener(listener: sg_commit_listener) -> bool;
}
unsafe extern "C" {
    pub fn sg_make_buffer(desc: *const sg_buffer_desc) -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_make_image(desc: *const sg_image_desc) -> sg_image;
}
unsafe extern "C" {
    pub fn sg_make_sampler(desc: *const sg_sampler_desc) -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_make_shader(desc: *const sg_shader_desc) -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_make_pipeline(desc: *const sg_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_make_attachments(desc: *const sg_attachments_desc) -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_destroy_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_destroy_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_destroy_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_destroy_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_destroy_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_destroy_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_update_buffer(buf: sg_buffer, data: *const sg_range);
}
unsafe extern "C" {
    pub fn sg_update_image(img: sg_image, data: *const sg_image_data);
}
unsafe extern "C" {
    pub fn sg_append_buffer(buf: sg_buffer, data: *const sg_range) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_overflow(buf: sg_buffer) -> bool;
}
unsafe extern "C" {
    pub fn sg_query_buffer_will_overflow(buf: sg_buffer, size: usize) -> bool;
}
unsafe extern "C" {
    pub fn sg_begin_pass(pass: *const sg_pass);
}
unsafe extern "C" {
    pub fn sg_apply_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
unsafe extern "C" {
    pub fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
unsafe extern "C" {
    pub fn sg_apply_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_apply_bindings(bindings: *const sg_bindings);
}
unsafe extern "C" {
    pub fn sg_apply_uniforms(
        stage: sg_shader_stage,
        ub_index: ::std::os::raw::c_int,
        data: *const sg_range,
    );
}
unsafe extern "C" {
    pub fn sg_draw(
        base_element: ::std::os::raw::c_int,
        num_elements: ::std::os::raw::c_int,
        num_instances: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sg_end_pass();
}
unsafe extern "C" {
    pub fn sg_commit();
}
unsafe extern "C" {
    pub fn sg_query_desc() -> sg_desc;
}
unsafe extern "C" {
    pub fn sg_query_backend() -> sg_backend;
}
unsafe extern "C" {
    pub fn sg_query_features() -> sg_features;
}
unsafe extern "C" {
    pub fn sg_query_limits() -> sg_limits;
}
unsafe extern "C" {
    pub fn sg_query_pixelformat(fmt: sg_pixel_format) -> sg_pixelformat_info;
}
unsafe extern "C" {
    pub fn sg_query_row_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_surface_pitch(
        fmt: sg_pixel_format,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        row_align_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sg_query_buffer_state(buf: sg_buffer) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_image_state(img: sg_image) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_sampler_state(smp: sg_sampler) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_shader_state(shd: sg_shader) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_state(pip: sg_pipeline) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_attachments_state(atts: sg_attachments) -> sg_resource_state;
}
unsafe extern "C" {
    pub fn sg_query_buffer_info(buf: sg_buffer) -> sg_buffer_info;
}
unsafe extern "C" {
    pub fn sg_query_image_info(img: sg_image) -> sg_image_info;
}
unsafe extern "C" {
    pub fn sg_query_sampler_info(smp: sg_sampler) -> sg_sampler_info;
}
unsafe extern "C" {
    pub fn sg_query_shader_info(shd: sg_shader) -> sg_shader_info;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_info(pip: sg_pipeline) -> sg_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_query_attachments_info(atts: sg_attachments) -> sg_attachments_info;
}
unsafe extern "C" {
    pub fn sg_query_buffer_desc(buf: sg_buffer) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_desc(img: sg_image) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_desc(smp: sg_sampler) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_desc(shd: sg_shader) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_desc(pip: sg_pipeline) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_desc(atts: sg_attachments) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_query_buffer_defaults(desc: *const sg_buffer_desc) -> sg_buffer_desc;
}
unsafe extern "C" {
    pub fn sg_query_image_defaults(desc: *const sg_image_desc) -> sg_image_desc;
}
unsafe extern "C" {
    pub fn sg_query_sampler_defaults(desc: *const sg_sampler_desc) -> sg_sampler_desc;
}
unsafe extern "C" {
    pub fn sg_query_shader_defaults(desc: *const sg_shader_desc) -> sg_shader_desc;
}
unsafe extern "C" {
    pub fn sg_query_pipeline_defaults(desc: *const sg_pipeline_desc) -> sg_pipeline_desc;
}
unsafe extern "C" {
    pub fn sg_query_attachments_defaults(desc: *const sg_attachments_desc) -> sg_attachments_desc;
}
unsafe extern "C" {
    pub fn sg_alloc_buffer() -> sg_buffer;
}
unsafe extern "C" {
    pub fn sg_alloc_image() -> sg_image;
}
unsafe extern "C" {
    pub fn sg_alloc_sampler() -> sg_sampler;
}
unsafe extern "C" {
    pub fn sg_alloc_shader() -> sg_shader;
}
unsafe extern "C" {
    pub fn sg_alloc_pipeline() -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sg_alloc_attachments() -> sg_attachments;
}
unsafe extern "C" {
    pub fn sg_dealloc_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_dealloc_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_dealloc_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_dealloc_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_dealloc_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_dealloc_attachments(attachments: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_init_buffer(buf: sg_buffer, desc: *const sg_buffer_desc);
}
unsafe extern "C" {
    pub fn sg_init_image(img: sg_image, desc: *const sg_image_desc);
}
unsafe extern "C" {
    pub fn sg_init_sampler(smg: sg_sampler, desc: *const sg_sampler_desc);
}
unsafe extern "C" {
    pub fn sg_init_shader(shd: sg_shader, desc: *const sg_shader_desc);
}
unsafe extern "C" {
    pub fn sg_init_pipeline(pip: sg_pipeline, desc: *const sg_pipeline_desc);
}
unsafe extern "C" {
    pub fn sg_init_attachments(attachments: sg_attachments, desc: *const sg_attachments_desc);
}
unsafe extern "C" {
    pub fn sg_uninit_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_uninit_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_uninit_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_uninit_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_uninit_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_uninit_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_fail_buffer(buf: sg_buffer);
}
unsafe extern "C" {
    pub fn sg_fail_image(img: sg_image);
}
unsafe extern "C" {
    pub fn sg_fail_sampler(smp: sg_sampler);
}
unsafe extern "C" {
    pub fn sg_fail_shader(shd: sg_shader);
}
unsafe extern "C" {
    pub fn sg_fail_pipeline(pip: sg_pipeline);
}
unsafe extern "C" {
    pub fn sg_fail_attachments(atts: sg_attachments);
}
unsafe extern "C" {
    pub fn sg_enable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_disable_frame_stats();
}
unsafe extern "C" {
    pub fn sg_frame_stats_enabled() -> bool;
}
unsafe extern "C" {
    pub fn sg_query_frame_stats() -> sg_frame_stats;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_buffer_info"][::std::mem::size_of::<sg_d3d11_buffer_info>() - 8usize];
    ["Alignment of sg_d3d11_buffer_info"][::std::mem::align_of::<sg_d3d11_buffer_info>() - 8usize];
    ["Offset of field: sg_d3d11_buffer_info::buf"]
        [::std::mem::offset_of!(sg_d3d11_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_image_info {
    pub tex2d: *const ::std::os::raw::c_void,
    pub tex3d: *const ::std::os::raw::c_void,
    pub res: *const ::std::os::raw::c_void,
    pub srv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_image_info"][::std::mem::size_of::<sg_d3d11_image_info>() - 32usize];
    ["Alignment of sg_d3d11_image_info"][::std::mem::align_of::<sg_d3d11_image_info>() - 8usize];
    ["Offset of field: sg_d3d11_image_info::tex2d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex2d) - 0usize];
    ["Offset of field: sg_d3d11_image_info::tex3d"]
        [::std::mem::offset_of!(sg_d3d11_image_info, tex3d) - 8usize];
    ["Offset of field: sg_d3d11_image_info::res"]
        [::std::mem::offset_of!(sg_d3d11_image_info, res) - 16usize];
    ["Offset of field: sg_d3d11_image_info::srv"]
        [::std::mem::offset_of!(sg_d3d11_image_info, srv) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_sampler_info"][::std::mem::size_of::<sg_d3d11_sampler_info>() - 8usize];
    ["Alignment of sg_d3d11_sampler_info"]
        [::std::mem::align_of::<sg_d3d11_sampler_info>() - 8usize];
    ["Offset of field: sg_d3d11_sampler_info::smp"]
        [::std::mem::offset_of!(sg_d3d11_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_shader_info {
    pub vs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub fs_cbufs: [*const ::std::os::raw::c_void; 4usize],
    pub vs: *const ::std::os::raw::c_void,
    pub fs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_shader_info"][::std::mem::size_of::<sg_d3d11_shader_info>() - 80usize];
    ["Alignment of sg_d3d11_shader_info"][::std::mem::align_of::<sg_d3d11_shader_info>() - 8usize];
    ["Offset of field: sg_d3d11_shader_info::vs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs_cbufs) - 0usize];
    ["Offset of field: sg_d3d11_shader_info::fs_cbufs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs_cbufs) - 32usize];
    ["Offset of field: sg_d3d11_shader_info::vs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, vs) - 64usize];
    ["Offset of field: sg_d3d11_shader_info::fs"]
        [::std::mem::offset_of!(sg_d3d11_shader_info, fs) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_pipeline_info {
    pub il: *const ::std::os::raw::c_void,
    pub rs: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
    pub bs: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_pipeline_info"][::std::mem::size_of::<sg_d3d11_pipeline_info>() - 32usize];
    ["Alignment of sg_d3d11_pipeline_info"]
        [::std::mem::align_of::<sg_d3d11_pipeline_info>() - 8usize];
    ["Offset of field: sg_d3d11_pipeline_info::il"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, il) - 0usize];
    ["Offset of field: sg_d3d11_pipeline_info::rs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, rs) - 8usize];
    ["Offset of field: sg_d3d11_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, dss) - 16usize];
    ["Offset of field: sg_d3d11_pipeline_info::bs"]
        [::std::mem::offset_of!(sg_d3d11_pipeline_info, bs) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_attachments_info {
    pub color_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_rtv: [*const ::std::os::raw::c_void; 4usize],
    pub dsv: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_d3d11_attachments_info"]
        [::std::mem::size_of::<sg_d3d11_attachments_info>() - 72usize];
    ["Alignment of sg_d3d11_attachments_info"]
        [::std::mem::align_of::<sg_d3d11_attachments_info>() - 8usize];
    ["Offset of field: sg_d3d11_attachments_info::color_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, color_rtv) - 0usize];
    ["Offset of field: sg_d3d11_attachments_info::resolve_rtv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, resolve_rtv) - 32usize];
    ["Offset of field: sg_d3d11_attachments_info::dsv"]
        [::std::mem::offset_of!(sg_d3d11_attachments_info, dsv) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_buffer_info {
    pub buf: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_buffer_info"][::std::mem::size_of::<sg_mtl_buffer_info>() - 24usize];
    ["Alignment of sg_mtl_buffer_info"][::std::mem::align_of::<sg_mtl_buffer_info>() - 8usize];
    ["Offset of field: sg_mtl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_mtl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_buffer_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_image_info {
    pub tex: [*const ::std::os::raw::c_void; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_image_info"][::std::mem::size_of::<sg_mtl_image_info>() - 24usize];
    ["Alignment of sg_mtl_image_info"][::std::mem::align_of::<sg_mtl_image_info>() - 8usize];
    ["Offset of field: sg_mtl_image_info::tex"]
        [::std::mem::offset_of!(sg_mtl_image_info, tex) - 0usize];
    ["Offset of field: sg_mtl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_mtl_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_sampler_info"][::std::mem::size_of::<sg_mtl_sampler_info>() - 8usize];
    ["Alignment of sg_mtl_sampler_info"][::std::mem::align_of::<sg_mtl_sampler_info>() - 8usize];
    ["Offset of field: sg_mtl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_mtl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_shader_info {
    pub vs_lib: *const ::std::os::raw::c_void,
    pub fs_lib: *const ::std::os::raw::c_void,
    pub vs_func: *const ::std::os::raw::c_void,
    pub fs_func: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_shader_info"][::std::mem::size_of::<sg_mtl_shader_info>() - 32usize];
    ["Alignment of sg_mtl_shader_info"][::std::mem::align_of::<sg_mtl_shader_info>() - 8usize];
    ["Offset of field: sg_mtl_shader_info::vs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_lib) - 0usize];
    ["Offset of field: sg_mtl_shader_info::fs_lib"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_lib) - 8usize];
    ["Offset of field: sg_mtl_shader_info::vs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, vs_func) - 16usize];
    ["Offset of field: sg_mtl_shader_info::fs_func"]
        [::std::mem::offset_of!(sg_mtl_shader_info, fs_func) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_mtl_pipeline_info {
    pub rps: *const ::std::os::raw::c_void,
    pub dss: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_mtl_pipeline_info"][::std::mem::size_of::<sg_mtl_pipeline_info>() - 16usize];
    ["Alignment of sg_mtl_pipeline_info"][::std::mem::align_of::<sg_mtl_pipeline_info>() - 8usize];
    ["Offset of field: sg_mtl_pipeline_info::rps"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, rps) - 0usize];
    ["Offset of field: sg_mtl_pipeline_info::dss"]
        [::std::mem::offset_of!(sg_mtl_pipeline_info, dss) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_buffer_info {
    pub buf: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_buffer_info"][::std::mem::size_of::<sg_wgpu_buffer_info>() - 8usize];
    ["Alignment of sg_wgpu_buffer_info"][::std::mem::align_of::<sg_wgpu_buffer_info>() - 8usize];
    ["Offset of field: sg_wgpu_buffer_info::buf"]
        [::std::mem::offset_of!(sg_wgpu_buffer_info, buf) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_image_info {
    pub tex: *const ::std::os::raw::c_void,
    pub view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_image_info"][::std::mem::size_of::<sg_wgpu_image_info>() - 16usize];
    ["Alignment of sg_wgpu_image_info"][::std::mem::align_of::<sg_wgpu_image_info>() - 8usize];
    ["Offset of field: sg_wgpu_image_info::tex"]
        [::std::mem::offset_of!(sg_wgpu_image_info, tex) - 0usize];
    ["Offset of field: sg_wgpu_image_info::view"]
        [::std::mem::offset_of!(sg_wgpu_image_info, view) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_sampler_info {
    pub smp: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_sampler_info"][::std::mem::size_of::<sg_wgpu_sampler_info>() - 8usize];
    ["Alignment of sg_wgpu_sampler_info"][::std::mem::align_of::<sg_wgpu_sampler_info>() - 8usize];
    ["Offset of field: sg_wgpu_sampler_info::smp"]
        [::std::mem::offset_of!(sg_wgpu_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_shader_info {
    pub vs_mod: *const ::std::os::raw::c_void,
    pub fs_mod: *const ::std::os::raw::c_void,
    pub bgl: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_shader_info"][::std::mem::size_of::<sg_wgpu_shader_info>() - 24usize];
    ["Alignment of sg_wgpu_shader_info"][::std::mem::align_of::<sg_wgpu_shader_info>() - 8usize];
    ["Offset of field: sg_wgpu_shader_info::vs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, vs_mod) - 0usize];
    ["Offset of field: sg_wgpu_shader_info::fs_mod"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, fs_mod) - 8usize];
    ["Offset of field: sg_wgpu_shader_info::bgl"]
        [::std::mem::offset_of!(sg_wgpu_shader_info, bgl) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_pipeline_info {
    pub pip: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_pipeline_info"][::std::mem::size_of::<sg_wgpu_pipeline_info>() - 8usize];
    ["Alignment of sg_wgpu_pipeline_info"]
        [::std::mem::align_of::<sg_wgpu_pipeline_info>() - 8usize];
    ["Offset of field: sg_wgpu_pipeline_info::pip"]
        [::std::mem::offset_of!(sg_wgpu_pipeline_info, pip) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_attachments_info {
    pub color_view: [*const ::std::os::raw::c_void; 4usize],
    pub resolve_view: [*const ::std::os::raw::c_void; 4usize],
    pub ds_view: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_wgpu_attachments_info"]
        [::std::mem::size_of::<sg_wgpu_attachments_info>() - 72usize];
    ["Alignment of sg_wgpu_attachments_info"]
        [::std::mem::align_of::<sg_wgpu_attachments_info>() - 8usize];
    ["Offset of field: sg_wgpu_attachments_info::color_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, color_view) - 0usize];
    ["Offset of field: sg_wgpu_attachments_info::resolve_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, resolve_view) - 32usize];
    ["Offset of field: sg_wgpu_attachments_info::ds_view"]
        [::std::mem::offset_of!(sg_wgpu_attachments_info, ds_view) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_buffer_info {
    pub buf: [u32; 2usize],
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_buffer_info"][::std::mem::size_of::<sg_gl_buffer_info>() - 12usize];
    ["Alignment of sg_gl_buffer_info"][::std::mem::align_of::<sg_gl_buffer_info>() - 4usize];
    ["Offset of field: sg_gl_buffer_info::buf"]
        [::std::mem::offset_of!(sg_gl_buffer_info, buf) - 0usize];
    ["Offset of field: sg_gl_buffer_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_buffer_info, active_slot) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_image_info {
    pub tex: [u32; 2usize],
    pub tex_target: u32,
    pub msaa_render_buffer: u32,
    pub active_slot: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_image_info"][::std::mem::size_of::<sg_gl_image_info>() - 20usize];
    ["Alignment of sg_gl_image_info"][::std::mem::align_of::<sg_gl_image_info>() - 4usize];
    ["Offset of field: sg_gl_image_info::tex"]
        [::std::mem::offset_of!(sg_gl_image_info, tex) - 0usize];
    ["Offset of field: sg_gl_image_info::tex_target"]
        [::std::mem::offset_of!(sg_gl_image_info, tex_target) - 8usize];
    ["Offset of field: sg_gl_image_info::msaa_render_buffer"]
        [::std::mem::offset_of!(sg_gl_image_info, msaa_render_buffer) - 12usize];
    ["Offset of field: sg_gl_image_info::active_slot"]
        [::std::mem::offset_of!(sg_gl_image_info, active_slot) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_sampler_info {
    pub smp: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_sampler_info"][::std::mem::size_of::<sg_gl_sampler_info>() - 4usize];
    ["Alignment of sg_gl_sampler_info"][::std::mem::align_of::<sg_gl_sampler_info>() - 4usize];
    ["Offset of field: sg_gl_sampler_info::smp"]
        [::std::mem::offset_of!(sg_gl_sampler_info, smp) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_shader_info {
    pub prog: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_shader_info"][::std::mem::size_of::<sg_gl_shader_info>() - 4usize];
    ["Alignment of sg_gl_shader_info"][::std::mem::align_of::<sg_gl_shader_info>() - 4usize];
    ["Offset of field: sg_gl_shader_info::prog"]
        [::std::mem::offset_of!(sg_gl_shader_info, prog) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_gl_attachments_info {
    pub framebuffer: u32,
    pub msaa_resolve_framebuffer: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sg_gl_attachments_info"][::std::mem::size_of::<sg_gl_attachments_info>() - 20usize];
    ["Alignment of sg_gl_attachments_info"]
        [::std::mem::align_of::<sg_gl_attachments_info>() - 4usize];
    ["Offset of field: sg_gl_attachments_info::framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, framebuffer) - 0usize];
    ["Offset of field: sg_gl_attachments_info::msaa_resolve_framebuffer"]
        [::std::mem::offset_of!(sg_gl_attachments_info, msaa_resolve_framebuffer) - 4usize];
};
unsafe extern "C" {
    pub fn sg_d3d11_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_device_context() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_buffer_info(buf: sg_buffer) -> sg_d3d11_buffer_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_image_info(img: sg_image) -> sg_d3d11_image_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_sampler_info(smp: sg_sampler) -> sg_d3d11_sampler_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_shader_info(shd: sg_shader) -> sg_d3d11_shader_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_pipeline_info(pip: sg_pipeline) -> sg_d3d11_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_d3d11_query_attachments_info(atts: sg_attachments) -> sg_d3d11_attachments_info;
}
unsafe extern "C" {
    pub fn sg_mtl_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_render_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_mtl_query_buffer_info(buf: sg_buffer) -> sg_mtl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_image_info(img: sg_image) -> sg_mtl_image_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_sampler_info(smp: sg_sampler) -> sg_mtl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_shader_info(shd: sg_shader) -> sg_mtl_shader_info;
}
unsafe extern "C" {
    pub fn sg_mtl_query_pipeline_info(pip: sg_pipeline) -> sg_mtl_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_device() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_queue() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_command_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_render_pass_encoder() -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_buffer_info(buf: sg_buffer) -> sg_wgpu_buffer_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_image_info(img: sg_image) -> sg_wgpu_image_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_sampler_info(smp: sg_sampler) -> sg_wgpu_sampler_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_shader_info(shd: sg_shader) -> sg_wgpu_shader_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_pipeline_info(pip: sg_pipeline) -> sg_wgpu_pipeline_info;
}
unsafe extern "C" {
    pub fn sg_wgpu_query_attachments_info(atts: sg_attachments) -> sg_wgpu_attachments_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_buffer_info(buf: sg_buffer) -> sg_gl_buffer_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_image_info(img: sg_image) -> sg_gl_image_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_sampler_info(smp: sg_sampler) -> sg_gl_sampler_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_shader_info(shd: sg_shader) -> sg_gl_shader_info;
}
unsafe extern "C" {
    pub fn sg_gl_query_attachments_info(atts: sg_attachments) -> sg_gl_attachments_info;
}
unsafe extern "C" {
    pub fn sglue_environment() -> sg_environment;
}
unsafe extern "C" {
    pub fn sglue_swapchain() -> sg_swapchain;
}
pub const sgp_error_SGP_NO_ERROR: sgp_error = 0;
pub const sgp_error_SGP_ERROR_SOKOL_INVALID: sgp_error = 1;
pub const sgp_error_SGP_ERROR_VERTICES_FULL: sgp_error = 2;
pub const sgp_error_SGP_ERROR_UNIFORMS_FULL: sgp_error = 3;
pub const sgp_error_SGP_ERROR_COMMANDS_FULL: sgp_error = 4;
pub const sgp_error_SGP_ERROR_VERTICES_OVERFLOW: sgp_error = 5;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_OVERFLOW: sgp_error = 6;
pub const sgp_error_SGP_ERROR_TRANSFORM_STACK_UNDERFLOW: sgp_error = 7;
pub const sgp_error_SGP_ERROR_STATE_STACK_OVERFLOW: sgp_error = 8;
pub const sgp_error_SGP_ERROR_STATE_STACK_UNDERFLOW: sgp_error = 9;
pub const sgp_error_SGP_ERROR_ALLOC_FAILED: sgp_error = 10;
pub const sgp_error_SGP_ERROR_MAKE_VERTEX_BUFFER_FAILED: sgp_error = 11;
pub const sgp_error_SGP_ERROR_MAKE_WHITE_IMAGE_FAILED: sgp_error = 12;
pub const sgp_error_SGP_ERROR_MAKE_NEAREST_SAMPLER_FAILED: sgp_error = 13;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_SHADER_FAILED: sgp_error = 14;
pub const sgp_error_SGP_ERROR_MAKE_COMMON_PIPELINE_FAILED: sgp_error = 15;
pub type sgp_error = ::std::os::raw::c_uint;
pub const sgp_blend_mode_SGP_BLENDMODE_NONE: sgp_blend_mode = 0;
pub const sgp_blend_mode_SGP_BLENDMODE_BLEND: sgp_blend_mode = 1;
pub const sgp_blend_mode_SGP_BLENDMODE_ADD: sgp_blend_mode = 2;
pub const sgp_blend_mode_SGP_BLENDMODE_MOD: sgp_blend_mode = 3;
pub const sgp_blend_mode_SGP_BLENDMODE_MUL: sgp_blend_mode = 4;
pub const sgp_blend_mode__SGP_BLENDMODE_NUM: sgp_blend_mode = 5;
pub type sgp_blend_mode = ::std::os::raw::c_uint;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COORD: sgp_vs_attr_location = 0;
pub const sgp_vs_attr_location_SGP_VS_ATTR_COLOR: sgp_vs_attr_location = 1;
pub type sgp_vs_attr_location = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_isize {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_isize"][::std::mem::size_of::<sgp_isize>() - 8usize];
    ["Alignment of sgp_isize"][::std::mem::align_of::<sgp_isize>() - 4usize];
    ["Offset of field: sgp_isize::w"][::std::mem::offset_of!(sgp_isize, w) - 0usize];
    ["Offset of field: sgp_isize::h"][::std::mem::offset_of!(sgp_isize, h) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_irect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_irect"][::std::mem::size_of::<sgp_irect>() - 16usize];
    ["Alignment of sgp_irect"][::std::mem::align_of::<sgp_irect>() - 4usize];
    ["Offset of field: sgp_irect::x"][::std::mem::offset_of!(sgp_irect, x) - 0usize];
    ["Offset of field: sgp_irect::y"][::std::mem::offset_of!(sgp_irect, y) - 4usize];
    ["Offset of field: sgp_irect::w"][::std::mem::offset_of!(sgp_irect, w) - 8usize];
    ["Offset of field: sgp_irect::h"][::std::mem::offset_of!(sgp_irect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_rect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_rect"][::std::mem::size_of::<sgp_rect>() - 16usize];
    ["Alignment of sgp_rect"][::std::mem::align_of::<sgp_rect>() - 4usize];
    ["Offset of field: sgp_rect::x"][::std::mem::offset_of!(sgp_rect, x) - 0usize];
    ["Offset of field: sgp_rect::y"][::std::mem::offset_of!(sgp_rect, y) - 4usize];
    ["Offset of field: sgp_rect::w"][::std::mem::offset_of!(sgp_rect, w) - 8usize];
    ["Offset of field: sgp_rect::h"][::std::mem::offset_of!(sgp_rect, h) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textured_rect {
    pub dst: sgp_rect,
    pub src: sgp_rect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textured_rect"][::std::mem::size_of::<sgp_textured_rect>() - 32usize];
    ["Alignment of sgp_textured_rect"][::std::mem::align_of::<sgp_textured_rect>() - 4usize];
    ["Offset of field: sgp_textured_rect::dst"]
        [::std::mem::offset_of!(sgp_textured_rect, dst) - 0usize];
    ["Offset of field: sgp_textured_rect::src"]
        [::std::mem::offset_of!(sgp_textured_rect, src) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vec2"][::std::mem::size_of::<sgp_vec2>() - 8usize];
    ["Alignment of sgp_vec2"][::std::mem::align_of::<sgp_vec2>() - 4usize];
    ["Offset of field: sgp_vec2::x"][::std::mem::offset_of!(sgp_vec2, x) - 0usize];
    ["Offset of field: sgp_vec2::y"][::std::mem::offset_of!(sgp_vec2, y) - 4usize];
};
pub type sgp_point = sgp_vec2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_line {
    pub a: sgp_point,
    pub b: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_line"][::std::mem::size_of::<sgp_line>() - 16usize];
    ["Alignment of sgp_line"][::std::mem::align_of::<sgp_line>() - 4usize];
    ["Offset of field: sgp_line::a"][::std::mem::offset_of!(sgp_line, a) - 0usize];
    ["Offset of field: sgp_line::b"][::std::mem::offset_of!(sgp_line, b) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_triangle {
    pub a: sgp_point,
    pub b: sgp_point,
    pub c: sgp_point,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_triangle"][::std::mem::size_of::<sgp_triangle>() - 24usize];
    ["Alignment of sgp_triangle"][::std::mem::align_of::<sgp_triangle>() - 4usize];
    ["Offset of field: sgp_triangle::a"][::std::mem::offset_of!(sgp_triangle, a) - 0usize];
    ["Offset of field: sgp_triangle::b"][::std::mem::offset_of!(sgp_triangle, b) - 8usize];
    ["Offset of field: sgp_triangle::c"][::std::mem::offset_of!(sgp_triangle, c) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_mat2x3 {
    pub v: [[f32; 3usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_mat2x3"][::std::mem::size_of::<sgp_mat2x3>() - 24usize];
    ["Alignment of sgp_mat2x3"][::std::mem::align_of::<sgp_mat2x3>() - 4usize];
    ["Offset of field: sgp_mat2x3::v"][::std::mem::offset_of!(sgp_mat2x3, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color"][::std::mem::size_of::<sgp_color>() - 16usize];
    ["Alignment of sgp_color"][::std::mem::align_of::<sgp_color>() - 4usize];
    ["Offset of field: sgp_color::r"][::std::mem::offset_of!(sgp_color, r) - 0usize];
    ["Offset of field: sgp_color::g"][::std::mem::offset_of!(sgp_color, g) - 4usize];
    ["Offset of field: sgp_color::b"][::std::mem::offset_of!(sgp_color, b) - 8usize];
    ["Offset of field: sgp_color::a"][::std::mem::offset_of!(sgp_color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_color_ub4 {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_color_ub4"][::std::mem::size_of::<sgp_color_ub4>() - 4usize];
    ["Alignment of sgp_color_ub4"][::std::mem::align_of::<sgp_color_ub4>() - 1usize];
    ["Offset of field: sgp_color_ub4::r"][::std::mem::offset_of!(sgp_color_ub4, r) - 0usize];
    ["Offset of field: sgp_color_ub4::g"][::std::mem::offset_of!(sgp_color_ub4, g) - 1usize];
    ["Offset of field: sgp_color_ub4::b"][::std::mem::offset_of!(sgp_color_ub4, b) - 2usize];
    ["Offset of field: sgp_color_ub4::a"][::std::mem::offset_of!(sgp_color_ub4, a) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_vertex {
    pub position: sgp_vec2,
    pub texcoord: sgp_vec2,
    pub color: sgp_color_ub4,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_vertex"][::std::mem::size_of::<sgp_vertex>() - 20usize];
    ["Alignment of sgp_vertex"][::std::mem::align_of::<sgp_vertex>() - 4usize];
    ["Offset of field: sgp_vertex::position"]
        [::std::mem::offset_of!(sgp_vertex, position) - 0usize];
    ["Offset of field: sgp_vertex::texcoord"]
        [::std::mem::offset_of!(sgp_vertex, texcoord) - 8usize];
    ["Offset of field: sgp_vertex::color"][::std::mem::offset_of!(sgp_vertex, color) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_uniform {
    pub size: u32,
    pub content: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_uniform"][::std::mem::size_of::<sgp_uniform>() - 20usize];
    ["Alignment of sgp_uniform"][::std::mem::align_of::<sgp_uniform>() - 4usize];
    ["Offset of field: sgp_uniform::size"][::std::mem::offset_of!(sgp_uniform, size) - 0usize];
    ["Offset of field: sgp_uniform::content"]
        [::std::mem::offset_of!(sgp_uniform, content) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_textures_uniform {
    pub count: u32,
    pub images: [sg_image; 4usize],
    pub samplers: [sg_sampler; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_textures_uniform"][::std::mem::size_of::<sgp_textures_uniform>() - 36usize];
    ["Alignment of sgp_textures_uniform"][::std::mem::align_of::<sgp_textures_uniform>() - 4usize];
    ["Offset of field: sgp_textures_uniform::count"]
        [::std::mem::offset_of!(sgp_textures_uniform, count) - 0usize];
    ["Offset of field: sgp_textures_uniform::images"]
        [::std::mem::offset_of!(sgp_textures_uniform, images) - 4usize];
    ["Offset of field: sgp_textures_uniform::samplers"]
        [::std::mem::offset_of!(sgp_textures_uniform, samplers) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_state {
    pub frame_size: sgp_isize,
    pub viewport: sgp_irect,
    pub scissor: sgp_irect,
    pub proj: sgp_mat2x3,
    pub transform: sgp_mat2x3,
    pub mvp: sgp_mat2x3,
    pub thickness: f32,
    pub color: sgp_color_ub4,
    pub textures: sgp_textures_uniform,
    pub uniform: sgp_uniform,
    pub blend_mode: sgp_blend_mode,
    pub pipeline: sg_pipeline,
    pub _base_vertex: u32,
    pub _base_uniform: u32,
    pub _base_command: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_state"][::std::mem::size_of::<sgp_state>() - 196usize];
    ["Alignment of sgp_state"][::std::mem::align_of::<sgp_state>() - 4usize];
    ["Offset of field: sgp_state::frame_size"]
        [::std::mem::offset_of!(sgp_state, frame_size) - 0usize];
    ["Offset of field: sgp_state::viewport"][::std::mem::offset_of!(sgp_state, viewport) - 8usize];
    ["Offset of field: sgp_state::scissor"][::std::mem::offset_of!(sgp_state, scissor) - 24usize];
    ["Offset of field: sgp_state::proj"][::std::mem::offset_of!(sgp_state, proj) - 40usize];
    ["Offset of field: sgp_state::transform"]
        [::std::mem::offset_of!(sgp_state, transform) - 64usize];
    ["Offset of field: sgp_state::mvp"][::std::mem::offset_of!(sgp_state, mvp) - 88usize];
    ["Offset of field: sgp_state::thickness"]
        [::std::mem::offset_of!(sgp_state, thickness) - 112usize];
    ["Offset of field: sgp_state::color"][::std::mem::offset_of!(sgp_state, color) - 116usize];
    ["Offset of field: sgp_state::textures"]
        [::std::mem::offset_of!(sgp_state, textures) - 120usize];
    ["Offset of field: sgp_state::uniform"][::std::mem::offset_of!(sgp_state, uniform) - 156usize];
    ["Offset of field: sgp_state::blend_mode"]
        [::std::mem::offset_of!(sgp_state, blend_mode) - 176usize];
    ["Offset of field: sgp_state::pipeline"]
        [::std::mem::offset_of!(sgp_state, pipeline) - 180usize];
    ["Offset of field: sgp_state::_base_vertex"]
        [::std::mem::offset_of!(sgp_state, _base_vertex) - 184usize];
    ["Offset of field: sgp_state::_base_uniform"]
        [::std::mem::offset_of!(sgp_state, _base_uniform) - 188usize];
    ["Offset of field: sgp_state::_base_command"]
        [::std::mem::offset_of!(sgp_state, _base_command) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_desc {
    pub max_vertices: u32,
    pub max_commands: u32,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_desc"][::std::mem::size_of::<sgp_desc>() - 20usize];
    ["Alignment of sgp_desc"][::std::mem::align_of::<sgp_desc>() - 4usize];
    ["Offset of field: sgp_desc::max_vertices"]
        [::std::mem::offset_of!(sgp_desc, max_vertices) - 0usize];
    ["Offset of field: sgp_desc::max_commands"]
        [::std::mem::offset_of!(sgp_desc, max_commands) - 4usize];
    ["Offset of field: sgp_desc::color_format"]
        [::std::mem::offset_of!(sgp_desc, color_format) - 8usize];
    ["Offset of field: sgp_desc::depth_format"]
        [::std::mem::offset_of!(sgp_desc, depth_format) - 12usize];
    ["Offset of field: sgp_desc::sample_count"]
        [::std::mem::offset_of!(sgp_desc, sample_count) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgp_pipeline_desc {
    pub shader: sg_shader,
    pub primitive_type: sg_primitive_type,
    pub blend_mode: sgp_blend_mode,
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub has_vs_color: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sgp_pipeline_desc"][::std::mem::size_of::<sgp_pipeline_desc>() - 28usize];
    ["Alignment of sgp_pipeline_desc"][::std::mem::align_of::<sgp_pipeline_desc>() - 4usize];
    ["Offset of field: sgp_pipeline_desc::shader"]
        [::std::mem::offset_of!(sgp_pipeline_desc, shader) - 0usize];
    ["Offset of field: sgp_pipeline_desc::primitive_type"]
        [::std::mem::offset_of!(sgp_pipeline_desc, primitive_type) - 4usize];
    ["Offset of field: sgp_pipeline_desc::blend_mode"]
        [::std::mem::offset_of!(sgp_pipeline_desc, blend_mode) - 8usize];
    ["Offset of field: sgp_pipeline_desc::color_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, color_format) - 12usize];
    ["Offset of field: sgp_pipeline_desc::depth_format"]
        [::std::mem::offset_of!(sgp_pipeline_desc, depth_format) - 16usize];
    ["Offset of field: sgp_pipeline_desc::sample_count"]
        [::std::mem::offset_of!(sgp_pipeline_desc, sample_count) - 20usize];
    ["Offset of field: sgp_pipeline_desc::has_vs_color"]
        [::std::mem::offset_of!(sgp_pipeline_desc, has_vs_color) - 24usize];
};
unsafe extern "C" {
    pub fn sgp_setup(desc: *const sgp_desc);
}
unsafe extern "C" {
    pub fn sgp_shutdown();
}
unsafe extern "C" {
    pub fn sgp_is_valid() -> bool;
}
unsafe extern "C" {
    pub fn sgp_get_last_error() -> sgp_error;
}
unsafe extern "C" {
    pub fn sgp_get_error_message(error: sgp_error) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sgp_make_pipeline(desc: *const sgp_pipeline_desc) -> sg_pipeline;
}
unsafe extern "C" {
    pub fn sgp_begin(width: ::std::os::raw::c_int, height: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_flush();
}
unsafe extern "C" {
    pub fn sgp_end();
}
unsafe extern "C" {
    pub fn sgp_project(left: f32, right: f32, top: f32, bottom: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_project();
}
unsafe extern "C" {
    pub fn sgp_push_transform();
}
unsafe extern "C" {
    pub fn sgp_pop_transform();
}
unsafe extern "C" {
    pub fn sgp_reset_transform();
}
unsafe extern "C" {
    pub fn sgp_translate(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate(theta: f32);
}
unsafe extern "C" {
    pub fn sgp_rotate_at(theta: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_scale(sx: f32, sy: f32);
}
unsafe extern "C" {
    pub fn sgp_scale_at(sx: f32, sy: f32, x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_set_pipeline(pipeline: sg_pipeline);
}
unsafe extern "C" {
    pub fn sgp_reset_pipeline();
}
unsafe extern "C" {
    pub fn sgp_set_uniform(data: *const ::std::os::raw::c_void, size: u32);
}
unsafe extern "C" {
    pub fn sgp_reset_uniform();
}
unsafe extern "C" {
    pub fn sgp_set_blend_mode(blend_mode: sgp_blend_mode);
}
unsafe extern "C" {
    pub fn sgp_reset_blend_mode();
}
unsafe extern "C" {
    pub fn sgp_set_color(r: f32, g: f32, b: f32, a: f32);
}
unsafe extern "C" {
    pub fn sgp_reset_color();
}
unsafe extern "C" {
    pub fn sgp_set_image(channel: ::std::os::raw::c_int, image: sg_image);
}
unsafe extern "C" {
    pub fn sgp_unset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_reset_image(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_set_sampler(channel: ::std::os::raw::c_int, sampler: sg_sampler);
}
unsafe extern "C" {
    pub fn sgp_reset_sampler(channel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn sgp_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_viewport();
}
unsafe extern "C" {
    pub fn sgp_scissor(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn sgp_reset_scissor();
}
unsafe extern "C" {
    pub fn sgp_reset_state();
}
unsafe extern "C" {
    pub fn sgp_clear();
}
unsafe extern "C" {
    pub fn sgp_draw(primitive_type: sg_primitive_type, vertices: *const sgp_vertex, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_points(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_point(x: f32, y: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines(lines: *const sgp_line, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_line(ax: f32, ay: f32, bx: f32, by: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_lines_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles(triangles: *const sgp_triangle, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangle(ax: f32, ay: f32, bx: f32, by: f32, cx: f32, cy: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_triangles_strip(points: *const sgp_point, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rects(rects: *const sgp_rect, count: u32);
}
unsafe extern "C" {
    pub fn sgp_draw_filled_rect(x: f32, y: f32, w: f32, h: f32);
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rects(
        channel: ::std::os::raw::c_int,
        rects: *const sgp_textured_rect,
        count: u32,
    );
}
unsafe extern "C" {
    pub fn sgp_draw_textured_rect(
        channel: ::std::os::raw::c_int,
        dest_rect: sgp_rect,
        src_rect: sgp_rect,
    );
}
unsafe extern "C" {
    pub fn sgp_query_state() -> *mut sgp_state;
}
unsafe extern "C" {
    pub fn sgp_query_desc() -> sgp_desc;
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
unsafe extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub static mut __stdinp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stderrp: *mut FILE;
}
unsafe extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
unsafe extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub const STBI_default: _bindgen_ty_4 = 0;
pub const STBI_grey: _bindgen_ty_4 = 1;
pub const STBI_grey_alpha: _bindgen_ty_4 = 2;
pub const STBI_rgb: _bindgen_ty_4 = 3;
pub const STBI_rgb_alpha: _bindgen_ty_4 = 4;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_neural_footprint: u64,
    pub ri_lifetime_max_neural_footprint: u64,
    pub ri_interval_max_neural_footprint: u64,
    pub ri_reserved: [u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
unsafe extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Termsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Termsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Coredump_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Coredump_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Retcode_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Retcode_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopval_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopval_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Stopsig_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Stopsig_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn w_Filler_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_w_Filler_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
unsafe extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
unsafe extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
unsafe extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
unsafe extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
unsafe extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
unsafe extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
unsafe extern "C" {
    pub fn arc4random() -> u32;
}
unsafe extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
unsafe extern "C" {
    pub fn arc4random_stir();
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
unsafe extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sranddev();
}
unsafe extern "C" {
    pub fn srandomdev();
}
unsafe extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type stbi_uc = ::std::os::raw::c_uchar;
pub type stbi_us = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbi_io_callbacks {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            user: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, n: ::std::os::raw::c_int),
    >,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stbi_io_callbacks"][::std::mem::size_of::<stbi_io_callbacks>() - 24usize];
    ["Alignment of stbi_io_callbacks"][::std::mem::align_of::<stbi_io_callbacks>() - 8usize];
    ["Offset of field: stbi_io_callbacks::read"]
        [::std::mem::offset_of!(stbi_io_callbacks, read) - 0usize];
    ["Offset of field: stbi_io_callbacks::skip"]
        [::std::mem::offset_of!(stbi_io_callbacks, skip) - 8usize];
    ["Offset of field: stbi_io_callbacks::eof"]
        [::std::mem::offset_of!(stbi_io_callbacks, eof) - 16usize];
};
unsafe extern "C" {
    pub fn stbi_load_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_gif_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        delays: *mut *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        z: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
        req_comp: ::std::os::raw::c_int,
    ) -> *mut stbi_uc;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_16(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_load_from_file_16(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut stbi_us;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_loadf_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        channels_in_file: *mut ::std::os::raw::c_int,
        desired_channels: ::std::os::raw::c_int,
    ) -> *mut f32;
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_hdr_to_ldr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_gamma(gamma: f32);
}
unsafe extern "C" {
    pub fn stbi_ldr_to_hdr_scale(scale: f32);
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_hdr_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_failure_reason() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_image_free(retval_from_stbi_load: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn stbi_info_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_memory(
        buffer: *const stbi_uc,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_callbacks(
        clbk: *const stbi_io_callbacks,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info(
        filename: *const ::std::os::raw::c_char,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_info_from_file(
        f: *mut FILE,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        comp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_is_16_bit_from_file(f: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_set_unpremultiply_on_load_thread(
        flag_true_if_should_unpremultiply: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_convert_iphone_png_to_rgb_thread(
        flag_true_if_should_convert: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc_guesssize_headerflag(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        initial_size: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
        parse_header: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_malloc(
        buffer: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        outlen: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stbi_zlib_decode_noheader_buffer(
        obuffer: *mut ::std::os::raw::c_char,
        olen: ::std::os::raw::c_int,
        ibuffer: *const ::std::os::raw::c_char,
        ilen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
